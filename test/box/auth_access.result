session = require('session')
---
...
--
-- Check a double create space
--
s = box.schema.create_space('test')
---
...
s = box.schema.create_space('test')
---
- error: Space 'test' already exists
...
--
-- Check a double drop space
--
s:drop()
---
...
s:drop()
---
- error: Space 512 does not exist
...
--
-- Check double create user
--
box.schema.user.create('testus')
---
...
box.schema.user.create('testus')
---
- error: User 'testus' already exists
...
s = box.schema.create_space('admin_space')
---
...
s:create_index('primary', {type = 'hash', parts = {0, 'NUM'}})
---
...
s:insert({1})
---
- [1]
...
s:insert({2})
---
- [2]
...
--
-- Check double grant and read access
--
box.schema.user.grant('testus', 'read', 'space', 'admin_space')
---
...
box.schema.user.grant('testus', 'read', 'space', 'admin_space')
---
...
session.su('testus')
---
...
s:select(1)
---
- - [1]
...
s:insert({3})
---
- error: Write access denied for user 'testus' to space 'admin_space'
...
s:delete(1)
---
- error: Write access denied for user 'testus' to space 'admin_space'
...
s:drop()
---
- error: Read access denied for user 'testus' to space '_index'
...
--
-- Check double revoke
--
session.su('admin')
---
...
box.schema.user.revoke('testus', 'read', 'space', 'admin_space')
---
...
box.schema.user.revoke('testus', 'read', 'space', 'admin_space')
---
...
session.su('testus')
---
...
s:select(1)
---
- error: Read access denied for user 'testus' to space 'admin_space'
...
session.su('admin')
---
...
--
-- Check write access on space
-- 
box.schema.user.grant('testus', 'write', 'space', 'admin_space')
---
...
session.su('testus')
---
...
s:select(1)
---
- error: Read access denied for user 'testus' to space 'admin_space'
...
s:delete(1)
---
- [1]
...
s:insert({3})
---
- [3]
...
s:drop()
---
- error: Read access denied for user 'testus' to space '_index'
...
session.su('admin')
---
...
--
-- Check double drop user
--
box.schema.user.drop('testus')
---
...
box.schema.user.drop('testus')
---
- error: User 'testus' does not exist
...
--
-- Check 'guest' user
--
session.su('guest')
---
...
session.uid()
---
- 0
...
box.space._user:select(1)
---
- error: Read access denied for user 'guest' to space '_user'
...
s:select(1)
---
- error: Read access denied for user 'guest' to space 'admin_space'
...
s:insert({4})
---
- error: Write access denied for user 'guest' to space 'admin_space'
...
s:delete({3})
---
- error: Write access denied for user 'guest' to space 'admin_space'
...
s:drop()
---
- error: Read access denied for user 'guest' to space '_index'
...
gs = box.schema.create_space('guest_space')
---
- error: Read access denied for user 'guest' to space '_space'
...
box.schema.func.create('guest_func')
---
- error: Read access denied for user 'guest' to space '_func'
...
session.su('admin')
---
...
s:select()
---
- - [3]
  - [2]
...
--
-- Create user with universe read&write grants
-- and create this user session
--
box.schema.user.create('uniuser')
---
...
box.schema.user.grant('uniuser', 'read, write, execute', 'universe')
---
...
session.su('uniuser')
---
...
if session.uid() < 2 then return 'uid error' end
---
...
--
-- Check universal user
-- Check delete currently authenticated user
--
box.schema.user.drop('uniuser')
---
- error: Write access denied for user 'uniuser'
...
--
--Check create, call and drop function
--
box.schema.func.create('uniuser_func')
---
...
function uniuser_func() return 'hello' end
---
...
uniuser_func()
---
- hello
...
box.schema.func.drop('uniuser_func')
---
...
--
-- Check create and drop space
--
us = box.schema.create_space('uniuser_space')
---
...
us:drop()
---
...
--
-- Check create and drop user
--
box.schema.user.create('uniuser_testus')
---
...
box.schema.user.drop('uniuser_testus')
---
- error: Write access denied for user 'uniuser'
...
--
-- Check access system and any spaces
--
box.space.admin_space:select()
---
- - [3]
  - [2]
...
box.space._user:select(1)
---
- - [1, '', 'admin']
...
box.space._space:select(280)
---
- - [280, 1, '_space', 'memtx', 0]
...
us = box.schema.create_space('uniuser_space')
---
...
box.schema.func.create('uniuser_func')
---
...
session.su('admin')
---
...
box.schema.user.create('someuser')
---
...
box.schema.user.grant('someuser', 'read, write, execute', 'universe')
---
...
session.su('someuser')
---
...
--
-- Check drop objects of another user
--
s:drop()
---
- error: Write access denied for user 'someuser'
...
us:drop()
---
- error: Write access denied for user 'someuser'
...
box.schema.func.drop('uniuser_func')
---
- error: Write access denied for user 'someuser'
...
box.schema.user.drop('uniuser_testus')
---
- error: Write access denied for user 'someuser'
...
session.su('admin')
---
...
box.schema.func.drop('uniuser_func')
---
...
box.schema.user.drop('someuser')
---
...
box.schema.user.drop('uniuser_testus')
---
...
box.schema.user.drop('uniuser')
---
- error: Function '513' does not exist
...
box.space._user:delete(2)
---
- [2, '', 'uniuser', []]
...
s:drop()
---
...
--
-- Check write grant on _user
--
box.schema.user.create('testuser')
---
...
box.schema.user.grant('testuser', 'write', 'space', '_user')
---
...
session.su('testuser')
---
...
box.space._user:delete(2)
---
- error: 'Failed to drop user ''testuser'': the user has objects'
...
box.space._user:select(1)
---
- error: Read access denied for user 'testuser' to space '_user'
...
box.space._user:insert{3,'','someone'}
---
- [3, '', 'someone']
...
box.space._user:delete(3)
---
- error: Write access denied for user 'testuser'
...
session.su('admin')
---
...
box.space._user:select(1)
---
- - [1, '', 'admin']
...
box.space._user:delete(3)
---
- [3, '', 'someone']
...
box.schema.user.revoke('testuser', 'write', 'space', '_user')
---
...
--
-- Check read grant on _user
--
box.schema.user.grant('testuser', 'read', 'space', '_user')
---
...
session.su('testuser')
---
...
box.space._user:delete(2)
---
- error: Write access denied for user 'testuser' to space '_user'
...
box.space._user:select(1)
---
- - [1, '', 'admin']
...
box.space._user:insert{4,'','someone2'}
---
- error: Write access denied for user 'testuser' to space '_user'
...
session.su('admin')
---
...
--
-- Check read grant on _index
--
box.schema.user.grant('testuser', 'read', 'space', '_index')
---
...
session.su('testuser')
---
...
box.space._index:select(272)
---
- - [272, 0, 'primary', 'tree', 1, 1, 0, 'str']
...
box.space._index:insert{512, 1,'owner','tree', 1, 1, 0,'num'}
---
- error: Write access denied for user 'testuser' to space '_index'
...
session.su('admin')
---
...
--
-- Check max function limit
--
--# setopt delimiter ';'
function func_limit()
    local i = 1
    while true do
        box.schema.func.create('func'..i)
        i = i + 1
    end
    return i
end;
---
...
function drop_limit_func()
    local i = 1
    while true do
        box.schema.func.drop('func'..i)
        i = i + 1
    end
end;
---
...
func_limit();
---
- error: 'A limit on the total number of functions has been reached: 32000'
...
drop_limit_func();
---
- error: Function 'func32001' does not exist
...
box.schema.user.grant('testuser', 'read, write, execute', 'universe');
---
...
session.su('testuser');
---
...
func_limit();
---
- error: 'A limit on the total number of functions has been reached: 32000'
...
drop_limit_func();
---
- error: Function 'func32001' does not exist
...
--# setopt delimiter ''
session.su('admin')
---
...
box.schema.user.revoke('testuser', 'read, write, execute', 'universe')
---
...
--
-- Check that itertors check privileges
--
s = box.schema.create_space('glade') 
---
...
box.schema.user.grant('testuser', 'read', 'space', 'glade')
---
...
s:create_index('primary', {unique = true, parts = {0, 'NUM', 1, 'STR'}})
---
...
s:insert({1, 'A'})
---
- [1, 'A']
...
s:insert({2, 'B'})
---
- [2, 'B']
...
s:insert({3, 'C'})
---
- [3, 'C']
...
s:insert({4, 'D'})
---
- [4, 'D']
...
t = {}
---
...
for key, v in s.index.primary:pairs(3, {iterator = 'GE'}) do table.insert (t, v) end 
---
...
t
---
- - [3, 'C']
  - [4, 'D']
...
t = {}
---
...
session.su('testuser')
---
...
s:select()
---
- - [1, 'A']
  - [2, 'B']
  - [3, 'C']
  - [4, 'D']
...
for key, v in s.index.primary:pairs(3, {iterator = 'GE'}) do table.insert (t, v) end 
---
...
t
---
- - [3, 'C']
  - [4, 'D']
...
t = {}
---
...
session.su('admin')
---
...
box.schema.user.grant('testuser', 'write', 'space', 'glade')
---
...
session.su('testuser')
---
...
s:select()
---
- error: Read access denied for user 'testuser' to space 'glade'
...
for key, v in s.index.primary:pairs(1, {iterator = 'GE'}) do table.insert (t, v) end 
---
...
t
---
- - [1, 'A']
  - [2, 'B']
  - [3, 'C']
  - [4, 'D']
...
t = {}
---
...
session.su('admin')
---
...
box.schema.user.grant('testuser', 'read, write, execute', 'space', 'glade')
---
...
session.su('testuser')
---
...
s:select()
---
- - [1, 'A']
  - [2, 'B']
  - [3, 'C']
  - [4, 'D']
...
for key, v in s.index.primary:pairs(3, {iterator = 'GE'}) do table.insert (t, v) end 
---
...
t
---
- - [3, 'C']
  - [4, 'D']
...
t = {}
---
...
session.su('guest')
---
...
s:select()
---
- error: Read access denied for user 'guest' to space 'glade'
...
for key, v in s.index.primary:pairs(3, {iterator = 'GE'}) do table.insert (t, v) end 
---
...
t
---
- - [3, 'C']
  - [4, 'D']
...
t = {}
---
...
session.su('guest')
---
...
s:select()
---
- error: Read access denied for user 'guest' to space 'glade'
...
for key, v in s.index.primary:pairs(3, {iterator = 'GE'}) do table.insert (t, v) end 
---
...
t
---
- - [3, 'C']
  - [4, 'D']
...
session.su('admin')
---
...
s:drop()
---
...
box.space._user:select()
---
- - [0, '', 'guest']
  - [1, '', 'admin']
  - [2, '', 'testuser', []]
...
box.space._space:select()
---
- - [272, 1, '_schema', 'memtx', 0]
  - [280, 1, '_space', 'memtx', 0]
  - [288, 1, '_index', 'memtx', 0]
  - [296, 1, '_func', 'memtx', 0]
  - [304, 1, '_user', 'memtx', 0]
  - [312, 1, '_priv', 'memtx', 0]
  - [320, 1, '_cluster', 'memtx', 0]
...
box.space._func:select()
---
- []
...
session = nil
---
...
