<!DOCTYPE book [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="getting-started">

<title>Getting started</title>

<para>
This chapter shows how to download, how to install, and how to start Tarantool for the first time.
</para>

<para>
For production, if possible, you should download a binary (executable) package.
This will ensure that you have the same build of the same version that the developers have.
That makes analysis easier if later you need to
report a problem, and avoids subtle problems that might happen if
you used different tools or different parameters when building from source.
The section about binaries is <olink
targetptr="getting-started-binary"><quote>Downloading and
installing a binary package</quote></olink>.
</para>

<para>
For development, you will want to download a source package and make the binary
by yourself using a C/C++ compiler and common tools.
Although this is a bit harder, it gives more control.
And the source packages include additional files, for example the Tarantool test suite.
	The section about source is <olink
targetptr="getting-started-source"><quote>Downloading and building a source package</quote></olink>.
</para>

<para>
If the installation has already been done, then you should try it out.
	So we've provided some instructions that you can use to make a temporary <quote>sandbox</quote>.
In a few minutes you can start the server and type in some
database-manipulation statements.
The section about sandbox is <olink
targetptr="getting-started-start-stop"><quote>Starting Tarantool and making your first database</quote></olink>.
</para>

<section xml:id="getting-started-binary">
<title>Downloading and installing a binary package</title>

<para>
The repositories for the <quote>stable</quote> release are at <link xlink:href="http://tarantool.org/dist/stable" xlink:title="tarantool.org/dist/stble">tarantool.org/dist/stable</link>.
The repositories for the <quote>master</quote> release are at <link xlink:href="http://tarantool.org/dist/master" xlink:title="tarantool.org/dist/master">tarantool.org/dist/master</link>.
Since this is the manual for the <quote>master</quote> release, all instructions use <link xlink:href="http://tarantool.org/dist/master" xlink:title="tarantool.org/dist/master">tarantool.org/dist/master</link>.
</para>

<para>
An automatic build system creates, tests and publishes packages for every push into the master branch. 
Therefore if you looked at <link xlink:href="http://tarantool.org/dist/master" xlink:title="tarantool.org/dist/master">tarantool.org/dist/master</link> you would see
that there are source files and subdirectories for the packages that will be described in this section.
</para>

<para>
To download and install the package that's appropriate for your environment,
start a shell (terminal) and enter one of the following sets of command-line instructions.
</para>

<para>
<programlisting>
# DEBIAN commands for Tarantool master binary download:
# There is always an up-to-date Debian repository at
# <link xlink:href="http://tarantool.org/dist/master/debian">http://tarantool.org/dist/master/debian</link>
# The repository contains builds for Debian unstable "Sid", stable "Wheezy",
# forthcoming "Jessie", ...
# add the tarantool.org repository to your apt sources list:
# ($release is an environment variable which will contain the Debian version
# code e.g. "Wheezy")
<command>wget</command> http://tarantool.org/dist/public.key
<command>sudo apt-key add</command> <filename>./public.key</filename>
release=`lsb_release -c -s`
# append two lines to a list of source repositories
<command>echo</command> "deb http://tarantool.org/dist/master/debian/ $release main" | \
<command>sudo tee</command> <option>-a</option> <filename>/etc/apt/sources.list.d/tarantool.list</filename>
<command>echo</command> "deb-src http://tarantool.org/dist/master/debian/ $release main" | \
<command>sudo tee</command> <option>-a</option> <filename>/etc/apt/sources.list.d/tarantool.list</filename>
# install
<command>sudo apt-get update</command>
<command>sudo apt-get install</command> tarantool
</programlisting>
</para>

<para>
<programlisting>
# UBUNTU commands for Tarantool master binary download:
# There is always an up-to-date Ubuntu repository at
# <link xlink:href="http://tarantool.org/dist/master/ubuntu">http://tarantool.org/dist/master/ubuntu</link>
# The repository contains builds for Ubuntu 12.04 "precise", 12.10 "quantal",
# 13.04 "raring", 13.10 "saucy", 14.04 "trusty" ...
# add the tarantool.org repository to your apt sources list:
# ($release is an environment variable which will contain the Ubuntu version
# code e.g. "precise")
# (if you want the version that comes with Ubuntu, start with the lines that
# follow the '# install' comment)
<command>cd</command> ~
<command>wget</command> http://tarantool.org/dist/public.key
<command>sudo apt-key add</command> <filename>./public.key</filename>
release=`lsb_release -c -s`
# append two lines to a list of source repositories
<command>echo</command> "deb http://tarantool.org/dist/master/ubuntu/ $release main" | \
<command>sudo tee</command> <option>-a</option> <filename>/etc/apt/sources.list.d/tarantool.list</filename>
<command>echo</command> "deb-src http://tarantool.org/dist/master/ubuntu/ $release main" | \
<command>sudo tee</command> <option>-a</option> <filename>/etc/apt/sources.list.d/tarantool.list</filename>
# install
<command>sudo apt-get update</command>
<command>sudo apt-get install</command> tarantool
</programlisting>
</para>

<para>
<programlisting>
# CENTOS commands for Tarantool master binary download:
# These instructions are applicable for CentOS version 5 or 6,
# and RHEL version 5 or 6
# Pick the CentOS repository which fits your CentOS/RHEL version
# and your x86 platform:
# <link xlink:href="http://tarantool.org/dist/master/centos/5/os/i386">http://tarantool.org/dist/master/centos/5/os/i386 for version 5, x86-32</link>
# <link xlink:href="http://tarantool.org/dist/master/centos/6/os/i386">http://tarantool.org/dist/master/centos/6/os/i386 for version 6, x86-32</link>
# <link xlink:href="http://tarantool.org/dist/master/centos/5/os/x86_64">http://tarantool.org/dist/master/centos/5/os/x86_64 for version 5, x86-64</link>
# <link xlink:href="http://tarantool.org/dist/master/centos/6/os/x86_64">http://tarantool.org/dist/master/centos/6/os/x86_64 for version 6, x86-64</link>
# Add the following section to your yum repository list
# (<filename>/etc/yum.repos.d/tarantool.repo</filename>):
# (in the following instructions,
#     $releasever i.e. CentOS release version must be either 5 or 6)
# (in the following instructions,
#     $basearch i.e. base architecture must be either i386 or x86_64)
# [tarantool]
# name=CentOS-<replaceable>$releasever</replaceable> - Tarantool
# baseurl=http://tarantool.org/dist/master/centos/<replaceable>$releasever</replaceable>/os/<replaceable>$basearch</replaceable>/
# enabled=1
# gpgcheck=0
# For example, if you have CentOS version 6 and x86-64, you can
# add the new section thus:
<command>echo</command> "[tarantool]" | \
<command>sudo tee</command> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "name=CentOS-6 - Tarantool"| <command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "baseurl=http://tarantool.org/dist/master/centos/6/os/x86_64/" | \
<command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "enabled=1" | <command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "gpgcheck=0" | <command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
</programlisting>
</para>

<para>
<programlisting>
# FEDORA commands for Tarantool master binary download:
# These instructions are applicable for Fedora 20.
# Pick the Fedora repository:
# <link xlink:href="http://tarantool.org/dist/master/fedora/20/x86_64">http://tarantool.org/dist/master/fedora/20/x86_64 for version 20, x86-64</link>
# Add the following section to your yum repository list
# (<filename>/etc/yum.repos.d/tarantool.repo</filename>):
# (in the following instructions,
#     $releasever i.e. Fedora release version must be 20)
# (in the following instructions,
#     $basearch i.e. base architecture must be x86_64)
# [tarantool]
# name=Fedora-<replaceable>$releasever</replaceable> - Tarantool
# baseurl=http://tarantool.org/dist/master/fedora/<replaceable>$releasever</replaceable><replaceable>$basearch</replaceable>/
# enabled=1
# gpgcheck=0
# For example, if you have Fedora version 20, you can
# add the new section thus:
<command>echo</command> "[tarantool]" | \
<command>sudo tee</command> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "name=Fedora - Tarantool"| <command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "baseurl="http://tarantool.org/dist/master/fedora/20/x86_64/" | \
<command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "enabled=1" | <command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "gpgcheck=0" | <command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
</programlisting>
</para>

<para>
<programlisting>
# GENTOO commands for Tarantool master binary download:
# Tarantool is available from tarantool portage overlay.
# Use layman to add the overlay to your system:
<command>layman</command> <option>-S</option>
<command>layman</command> <option>-a</option> tarantool
<command>emerge</command> <filename>dev-db/tarantool</filename> <option>-av</option>
</programlisting>
</para>

<para>
<programlisting>
# FREEBSD commands for Tarantool master binary download:
# With your browser go to the FreeBSD ports page
# <link xlink:href="http://www.freebsd.org/ports/index.html">http://www.freebsd.org/ports/index.html</link>
# Enter the search term: tarantool
# Choose the package you want.
</programlisting>
</para>

<para>
<programlisting>
# MAC OS X commands for Tarantool master binary download:
# This is actually a <quote><productname>homebrew</productname></quote> recipe
# so it's not a true binary download, some source code is involved.
# First upgrade Clang (the C compiler) to version 3.2 or later using
# Command Line Tools for Xcode disk image version 4.6+ from
# Apple Developer web-site.
<command>brew install</command> --use-clang https://raw.githubusercontent.com/tarantool/tarantool/master/extra/tarantool.rb
# or
<command>brew install</command> https://raw.githubusercontent.com/tarantool/tarantool/master/extra/tarantool.rb
</programlisting>
</para>

<para>
More advice for binary downloads is at <link xlink:href="http://tarantool.org/download.html">http://tarantool.org/download.html</link>.
</para>

</section>

<section xml:id="getting-started-source">
<title>Downloading and building a source package</title>
<para>
For downloading Tarantool source and building it, the platforms can differ
and the preferences can differ.
But the steps are always the same. Here in the manual we'll explain what the steps are,
then on the Internet you can look at some example scripts.
</para>

<para>
1. Get tools and libraries that will be necessary for building and testing.
The absolutely necessary ones are:
  <itemizedlist>
    <listitem>
      <para>
A program for downloading source repositories.
In this case the necessary program is <quote><productname>git</productname></quote>. Although tarantool.org/dist
has source tarballs (the files whose names end in <quote>-src.tar.gz</quote>), the latest complete source downloads are on
github.com, and from github one gets with git.
 </para>
 </listitem>
 <listitem>
   <para>
A C/C++ compiler.
	Ordinarily the compiler is <productname>GCC</productname> version 4.5 or later,
		on Mac OS X it should be <productname>Clang</productname> version 3.2 or later.
   There may be some benefit in rebuilding gcc to suit tarantool requirements.
 </para>
 </listitem>
 <listitem>
   <para>
A program for managing the build process.
	This is always <productname>CMake</productname> for GNU/Linux and FreeBSD.
 The CMake version should be 2.8 or later.
 </para>
 </listitem>
 </itemizedlist>
</para>

<para>
Here are names of tools and libraries which may have to be installed in advance,
	using <quote><computeroutput>sudo apt-get</computeroutput></quote> (for Ubuntu), <quote><computeroutput>sudo yum install</computeroutput></quote> (for CentOS),
or the equivalent on other platforms. Different platforms may use slightly
	different names. Do not worry about the <quote>optional, for build with -DENABLE_DOC</quote>
ones unless you intend to work on the documentation.
<programlisting> binutils-dev or binutils-devel       # contains GNU bfd for printing stack traces
 gcc or clang                        # see above
 git                                 # see above
 uuid-dev                            # for uuid_* functions and replication
 cmake                               # see above
 libreadline-dev                     # for interactive mode
 libncurses5-dev or ncurses-devel    # see above
 xsltproc                            # optional, for build with -DENABLE_DOC
 lynx                                # optional, for build with -DENABLE_DOC
 jing                                # optional, for build with -DENABLE_DOC
 libxml2-utils                       # optional, for build with -DENABLE_DOC
 docbook5-xml                        # optional, for build with -DENABLE_DOC
 docbook-xsl-ns                      # optional, for build with -DENABLE_DOC
 w3c-sgml-lib                        # optional, for build with -DENABLE_DOC
 libsaxon-java                       # optional, for build with -DENABLE_DOC
 libxml-commons-resolver1.1-java     # optional, for build with -DENABLE_DOC
 libxerces2-java                     # optional, for build with -DENABLE_DOC
 libxslthl-java                      # optional, for build with -DENABLE_DOC
 autoconf                            # optional, appears only in Mac OS scripts
 zlib1g or zlib                      # optional, appears only in Mac OS scripts</programlisting>
</para>

<para>
2. Set up python modules for running the test suite or creating documentation.
 This step is optional. Python modules are not necessary for building Tarantool
 itself, unless one intends to use the -DENABLE_DOC option in step 6 or the
 "Run the test suite" option in step 8.</para>
<para>Say:<programlisting><command>python --version</command></programlisting>
... You should see that the python version is greater than or equal to 2.6 -- preferably 2.7 -- and less than 3.</para>
<para>On Ubuntu you can get modules from the repository:
<programlisting>
# For test suite
<command>sudo apt-get install</command> python-daemon python-yaml python-argparse
# For documentation
<command>sudo apt-get install</command> python-jinja2 python-markdown
</programlisting></para>
<para>On CentOS too you can get modules from the repository:<programlisting><command>sudo yum install</command> python26 python26-PyYAML python26-argparse</programlisting></para>
<para>But in general it is best to set up the modules by getting
 a tarball and doing the setup with <computeroutput>python setup.py</computeroutput>, thus:
<programlisting># python module for parsing YAML (pyYAML): For test suite:
# (If wget fails, check the <citetitle xlink:href="http://pyyaml.org/wiki/PyYAML" xlink:title="Python YAML parser">PyYAML</citetitle> web site
# to see what the current version is.)
<command>cd</command> ~
<command>wget</command> http://pyyaml.org/download/pyyaml/PyYAML-3.10.tar.gz
<command>tar</command> <option>-xzf</option> PyYAML-3.10.tar.gz
<command>cd</command> PyYAML-3.10
<command>sudo python</command> setup.py install
# python module for helping programs become daemons (daemon): For test suite:
# (if wget fails, check the <citetitle xlink:href="http://pypi.python.org/pypi/python-daemon" xlink:title="Python daemon">python-daemon</citetitle> web site
# to see what the current version is.)
<command>cd</command> ~
<command>wget</command> http://pypi.python.org/packages/source/p/python-daemon/python-daemon-1.5.5.tar.gz
<command>tar</command> <option>-xzvf</option> python-daemon-1.5.5.tar.gz
<command>cd</command> python-daemon-1.5.5
<command>sudo python</command> setup.py install
# python module for template engine (jinja2): For documentation:
# (If wget fails, check the <citetitle xlink:href="https://pypi.python.org/pypi/Jinja2" xlink:title="Python Jinja2">python-jinja2</citetitle> web site
# to see what the current version is.)
<command>cd</command> ~
<command>wget</command> https://pypi.python.org/packages/source/J/Jinja2/Jinja2-2.7.2.tar.gz
<command>tar</command> <option>-xzvf</option> Jinja2-2.7.2.tar.gz
<command>cd</command> Jinja2-2.7.2
<command>sudo python</command> setup.py install
# python module for text-to-html conversion (markdown): For documentation:
# (If wget fails, check the <citetitle xlink:href="http://pypi.python.org/pypi/Markdown/" xlink:title="Python implementation of Markdown">python-markdown</citetitle> web site
# to see what the current version is.)
<command>cd</command> ~
<command>wget</command> https://pypi.python.org/packages/source/M/Markdown/Markdown-2.3.1.tar.gz
<command>tar</command> <option>-xzvf</option> Markdown-2.3.1.tar.gz
<command>cd</command> Markdown-2.3.1
<command>sudo python</command> setup.py install
</programlisting>
</para>

<para>
3. Pick a default directory.
This can be anywhere. We'll assume that your default directory is <quote>~</quote>, and therefore
the tarantool download will go inside it, as <computeroutput><filename>~/tarantool</filename></computeroutput>.
</para>

<para>
4. Use <productname>git</productname> to download from github.com.<programlisting>
<command>cd</command> ~
<command>git clone</command> <option>-b master</option> https://github.com/tarantool/tarantool.git <option>tarantool</option></programlisting>
The optional argument <quote>-b master</quote> causes download from the master branch instead of the stable branch,
and the optional last word on the line, <quote>tarantool</quote>, means download is to <computeroutput>~/tarantool</computeroutput>.
</para>

<para>
5. Use <productname>git</productname> again so that third-party contributions will be seen as well.
This step is only necessary once, the first time you do a download.
There is an alternative -- say <quote><computeroutput><command>git clone</command> --recursive</computeroutput></quote> in step 3 --
but we prefer this method because it works with older versions of <productname>git</productname>.<programlisting><command>cd</command> ~/tarantool
<command>git submodule init</command>
<command>git submodule update</command>
<command>cd</command> ../</programlisting>
On rare occasions, the submodules will need to be updated again with the command: <userinput>git submodule update --init</userinput>.
</para>

<para>
6. Use CMake to initiate the build.<programlisting><command>cd</command> ~/tarantool
<command>make clean</command>         # unnecessary, added for good luck
<command>rm CMakeCache.txt</command>  # unnecessary, added for good luck
<command>cmake .</command>            # Start build with build type=Debug, no doc</programlisting>

The option for specifying build type is <option>-DCMAKE_BUILD_TYPE=</option><replaceable>type</replaceable> where
   type = {None | Debug | Release | RelWithDebInfo | MinSizeRel} and a reasonable
				choice for production is <option>-DCMAKE_BUILD_TYPE=RelWithDebInfo</option> (<quote>Debug</quote>
				is used only by project maintainers and <quote>Release</quote> is used only when the
   highest performance is required).
	The option for asking to build documentation is <computeroutput><option>-DENABLE_DOC=</option><replaceable>{true|false}</replaceable></computeroutput>
   and the assumption is that only a minority will need to rebuild the
   documentation (such as what you're reading now), so details about
   documentation are in the developer manual, and the reasonable choice
				is <computeroutput><option>-DENABLE_DOC=false</option></computeroutput> or just don't use the <computeroutput><option>-DENABLE_DOC</option></computeroutput> clause at all.
</para>

<para>
	7. Use make to complete the build.<programlisting><command>make</command></programlisting>
	It's possible to say <quote><computeroutput><command>make install</command></computeroutput></quote> too, but that's not generally done.
</para>

<para>
8. Run the test suite. This step is optional.
</para>
<para>
Tarantool's developers always run the test suite before they publish new versions. You should run the test suite too, if you
   make any changes in the code.
Assuming you downloaded to <filename>~/tarantool</filename>,
the principal steps are:<programlisting><command>mkdir</command> ~/tarantool/bin    # make a subdirectory named <filename>bin</filename>
<command>ln</command> /usr/bin/python ~/tarantool/bin/python # link python to bin (this may require superuser privilege)
<command>cd</command> ~/tarantool/test #get on the test subdirectory
PATH=~/tarantool/bin:$PATH ./run #run tests using python</programlisting>
 

The output should contain reassuring reports, for example
<programlisting><computeroutput>======================================================================
TEST                                            RESULT
------------------------------------------------------------
box/bad_trigger.test.py                         [ pass ]
box/call.test.py                                [ pass ]
box/iproto.test.py                              [ pass ]
box/xlog.test.py                                [ pass ]
box/admin.test.lua                              [ pass ]
box/auth_access.test.lua                        [ pass ]
... etc.</computeroutput></programlisting>
There are more than 70 tests in the suite.

   To prevent later confusion, clean up what's in the <filename>bin</filename>
subdirectory:<programlisting><command>rm</command> ~/tarantool/bin/python
<command>rmdir</command> ~/tarantool/bin</programlisting>
</para>


<para>
9. Make an rpm.
   This step is optional. It's only for people who want to redistribute Tarantool.
   Package maintainers who want to build with rpmbuild should consult the Tarantool developer guide.
</para>

<para>
This is the end of the list of steps to take for source downloads.
</para>

<para>
For your added convenience, github.com has README files with example scripts:

<productname xlink:href="https://github.com/tarantool/tarantool/blob/master/README.CentOS">README.CentOS</productname> for CentOS 5.8,
<productname xlink:href="https://github.com/tarantool/tarantool/blob/master/README.FreeBSD">README.FreeBSD</productname> for FreeBSD 8.3,
<productname xlink:href="https://github.com/tarantool/tarantool/blob/master/README.MacOSX">README.MacOSX</productname> for Mac OS X <quote>Lion</quote>,
<productname xlink:href="https://github.com/tarantool/tarantool/blob/master/README.md">README.md</productname> for generic GNU/Linux.

These example scripts assume that the intent is to download from the master branch, build
the server (but not the documentation), and run tests after build.
</para>

<para>
To build with SUSE 13.1, the steps are as described above, except that the appropriate YaST2 package names are:
binutils-devel, libuuid-devel, cmake, ncurses-devel, lynx, jing, libxml2-devel, docbook_5, saxon, libxslt-devel.
The python connector can be installed with <code>sudo easy_install pip</code> and <code>sudo pip install tarantool</code>.
</para>

</section>
<section xml:id="getting-started-start-stop">
<title>Starting Tarantool and making your first database</title>

<para>
Here is how to create a simple test database after installing.
</para>

<para>
1. Create a new directory. It's just for tests, you can delete it when the tests are over.<programlisting>
<command>mkdir</command> ~/tarantool_sandbox
<command>cd</command> ~/tarantool_sandbox </programlisting>
</para>

<para>
2. Start the server.
The server name is <computeroutput><filename>tarantool</filename></computeroutput>.<programlisting>
#if you downloaded a binary with apt-get or yum, say this:
  <command>/usr/bin/tarantool</command>
#if you downloaded and untarred a binary tarball to ~/tarantool, say this:
  <command>~/tarantool/bin/tarantool</command>
#if you built from a source download, say this:
  <command>~/tarantool/src/tarantool</command> </programlisting>
</para>

<para>
    The server starts in interactive mode and outputs a command prompt.
    To turn on the database, configure it:
<programlisting><prompt>tarantool></prompt> <userinput>box.cfg{admin_port=3313}</userinput></programlisting>
    (this minimal example is sufficient).
</para>

<para>
If all goes well, you will see the server displaying progress as it initializes, something like this:<programlisting>
2014-06-10 11:53:41.078 ... version 1.6.0-1326-gd5544f2
2014-06-10 11:53:41.078 ... log level 5
2014-06-10 11:53:41.080 ... mapping 1073741824 bytes for a shared arena...
2014-06-10 11:53:41.080 ... initialized
2014-06-10 11:53:41.081 ... initializing cluster
2014-06-10 11:53:41.094 ... synchronized with cluster
2014-06-10 11:53:41.095 ... done
2014-06-10 11:53:41.095 ... creating `./00000000000000000001.snap.inprogress'
2014-06-10 11:53:41.095 ... saving snapshot `./00000000000000000001.snap.inprogress'
2014-06-10 11:53:41.095 ... 0.0M rows written
2014-06-10 11:53:41.126 ... done
2014-06-10 11:53:41.126 ... bound to admin port tcp://0.0.0.0:3313
2014-06-10 11:53:41.127 ... I am primary
</programlisting>
</para>

<para>
Please follow
<olink targetptr="os-install-notes">distribution-specific
instructions</olink> to find out how to manage
Tarantool instances on your operating system.
</para>
  
<para>
	Now that the server is up, you could start up a different shell and
 connect to its administrative port with<programlisting>
  <command>telnet 0 3313</command></programlisting>
but for example purposes it is simpler to just leave the
server running in "interactive mode".
On production machines the interactive mode is just
for administrators, but because it's convenient for
learning it will be used for most examples in this manual.

Tarantool is waiting for the user to type instructions.
</para>

<para>
To create the first space and the first index, try this:<programlisting>
<prompt>tarantool&gt; </prompt><userinput>s = box.schema.create_space('tester')</userinput>
<prompt>tarantool&gt; </prompt><userinput>i = s:create_index('primary', {type = 'hash', parts = {1, 'NUM'}})</userinput></programlisting>
</para>

<para>
To insert three <quote>tuples</quote> (our name for <quote>records</quote>) into the first <quote>space</quote> of the database
try this:<programlisting><prompt>tarantool&gt; </prompt><userinput>t = s:insert({1})</userinput>
<prompt>tarantool&gt; </prompt><userinput>t = s:insert({2, 'Music'})</userinput>
<prompt>tarantool&gt; </prompt><userinput>t = s:insert({3, 'Length', 93})</userinput>
</programlisting>

To select a tuple from the first space of the database,
using the first defined key, try this:<programlisting><prompt>tarantool&gt; </prompt><userinput>s:select({3})</userinput></programlisting>

Your terminal screen should now look like this:<programlisting>
tarantool&gt; s = box.schema.create_space('tester')
2014-06-10 12:04:18.158 ... creating `./00000000000000000002.xlog.inprogress'
---
...
tarantool&gt; s:create_index('primary', {type = 'hash', parts = {1, 'NUM'}})
---
...
tarantool&gt; t = s:insert{1}
---
...
tarantool&gt; t = s:insert{2, 'Music'}
---
...
tarantool&gt; t = s:insert{3, 'Length', 93}
---
...
tarantool&gt; s:select{3}
---
- - [3, 'Length', 93]
...

tarantool&gt;</programlisting>
</para>

<para>
You can repeat box.space...:insert() and box.space...:select() indefinitely.
When the testing is over:
To drop the space: <computeroutput>s:drop()</computeroutput>.
To stop tarantool: <keycombo><keysym>Ctrl</keysym><keysym>C</keysym></keycombo>.
To stop tarantool (an alternative): <computeroutput>os.exit()</computeroutput>.
To stop tarantool (from another terminal): <computeroutput><command>sudo pkill</command> -f tarantool</computeroutput>.
To destroy the test: <computeroutput><command>rm</command> -r ~/tarantool_sandbox</computeroutput>.
</para>

<sidebar>
<para>
To review ...
If you followed all the instructions in this chapter, then
so far you have: installed Tarantool from either a binary
or a source repository, started up the Tarantool server,
inserted and selected tuples.
</para>
</sidebar>

</section>

<section xml:id="differences-from-older-versions">
  <title>Differences between Tarantool 1.6 and older versions</title>

  <para>
    These major differences will affect people upgrading from a previous Tarantool version.
  </para>

  <para>LUA ALL THE WAY DOWN. 
    All requests are now treated as Lua instructions or Lua function invocations.
    There no longer is any need to precede them with "lua" or "call".
    For example, replace<programlisting>
    lua function lua_function() return 'hello world' end
    call lua_function()</programlisting>
    with<programlisting>
    function lua_function() return 'hello world' end
    lua_function()</programlisting>
  </para>
  <para>NAMES RATHER THAN NUMBERS.
    Spaces and indexes now have names as well as numbers.
    Names are specified at create time.
    Numbers (also called <computeroutput>id</computeroutput>s) are usually assigned automatically.
    Applications should use the names rather than the numbers.
  </para>
  <para>CHANGED TUPLE STORAGE = MSGPACK.
    There is a new format
    (<link xlink:href="https://en.wikipedia.org/wiki/MessagePack">msgpack</link>).
    Snapshot and WAL files have
     <link xlink:href="https://github.com/tarantool/tarantool/blob/master/doc/box-protocol.txt">an implementation of the msgpack format</link>;
    incompatible with the old format.
    Snapshot and WAL files have the same format (snapshots are  logs of inserts).
  </para>
  <para>CHANGED AUTHENTICATION.
    There are new options for password-based authentication of individual users.
    The old authentication method, "sandboxing" based on port, no longer exists.
  </para>
  <para>CHANGES IN CONFIGURATION.
    All options in the configuration file are now optional.
    The configuration file itself is now optional.
    "backlog" no longer exists.
    "script_dir" no longer exists, use #! instead (see below re "Tarantool = a shell script processor").
  </para>
  <para>CHANGES IN PORT CONFIGURATION.
    "secondary_port" no longer exists; use "primary_port".
    "replication_port" no longer exists; use "primary_port".
    "memcached" no longer exists (memcached is not supported).
    The admin port is Lua-only now, and the lua prefix is gone. 
  </para>
  <para>DATA DEFINITION WITH RUNTIME REQUESTS RATHER THAN A CONFIGURATION FILE.
    <computeroutput>box.schema</computeroutput> is a new package for space configuration.
    Spaces are added/dropped with box.schema.create_space / box.space.<replaceable>space_name</replaceable>.drop.
    Indexes are added/dropped with box.space.<replaceable>space-name</replaceable>.create_index /
    box.space.<replaceable>.space-name</replaceable>.index.<replaceable>index_name</replaceable>.drop.
    "space.estimated_rows" no longer exists.
    "space.cardinality" is renamed to "space.field_count".
    "space.temporary" means "not in snapshot or WAL, only definition exists".
  </para>
  <para>CHANGED FUNCTIONS IN BOX.SPACE.
    Where X is any of insert | select | update | replace | delete " etc. ...
    Old syntax box.space.name:X() no longer exists.
    Old syntax box.X() no longer exists.
    New syntax is
    box.space.<replaceable>space_name(</replaceable>:<replaceable>Lua-table</replaceable>).
    Example: box.space.t0:insert{0,'Hello'}
    Minor properties of a space (for example the name) can be altered without rebuild.
    All properties of an index can be altered without rebuild.
    The "return tuple" option no longer exists (f a tuple is found, it's returned).
  </para>
  <para>CHANGED FUNCTIONS IN BOX.TUPLE.
    There is a new, msgpack-based tuple update syntax.
    An update of the same field more than once in a single update is no longer allowed.
  </para>
  <para>CHANGES FOR TYPES.
    The NUM and NUM64 types are merged; both are now unsigned 64-bit.
    Output format is now consistently YAML so it can always be used with print().
  </para>
  <para>NEW METADATA RETRIEVAL METHOD = SYSTEM SPACES.
    The new system spaces contain metadata that can be retrieved with box.space..:select.
    The _space system space has information about existing spaces.
    The _index system space has information about existing indexes.
    Old syntax "show ..." no longer exists.
    New syntax is box.space._space:select(<replaceable>Lua-table</replaceable>)
    or other Lua functions.
  </para>
  <para>NEW TRIGGERS FOR REPLACE.
    Triggers can now be defined for replace, not just for connect/disconnect.
    Triggers can be disabled.
  </para>
  <para>CHANGED SERVER STARTUP BEHAVIOR.
    At start, if neither of the ports is bound, and no fibers are started
    by a script, the server exits as soon as the script finishes.
    The server now automatically creates a snapshot file 
    if it is missing. If it is a replica, it automatically 
    connects to the master and downloads the snapshot file
    from it.
  </para>
  <para>TARANTOOL = A SCRIPT PROCESSOR.
    Instead of processing scripts with bash or Perl, use tarantool server.
    For example, let the first line of a shell script be
    <computeroutput>#!/usr/bin/tarantool</computeroutput>.
    This will be a
    (<link xlink:href="https://en.wikipedia.org/wiki/Shebang_%28Unix%29" xlink:title="wikipedia.org/Shebang">"Hashbang" hint</link>)
    that Tarantool will be the script processor.
    Since Tarantool includes Lua, the file's instructions can be Lua.
  </para>
  <para>PERFORMANCE ENHANCEMENTS WHICH DO NOT AFFECT SYNTAX OR CONFIGURATION.
    On start, Tarantool uses multithreaded sorting to build tree indexes.
    There is a new slab allocator for tuples, which is less susceptible to fragmentation.
    The new tuple storage with msgpack handles a wide value range in a compact way.
    For the binary protocol, box request ids are renumbered to form a continuous space from 0 to 6.
  </para>
  <para>REMOVAL OF REDUNDANT FUNCTIONALITY.
    The backward-compatible next_equal/next/prev_equal/next/prev
    iteration functions no longer exist.
    The ability to handle multiple keys for select no longer exists,
    only one key per request is allowed.
    The "SQL-like" syntax no longer exists -- invoke functions from the box package instead,
    for example, replace
    <computeroutput>SELECT * FROM t0 WHERE k0 = 2</computeroutput>
    with
    <computeroutput>box.space.t0:select{2}</computeroutput>.
  </para>

</section>


</chapter>

<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
