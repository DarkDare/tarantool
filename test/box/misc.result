space = box.schema.create_space('tweedledum')
---
...
space:create_index('primary', { type = 'hash' })
---
...
-- Test Lua from admin console. Whenever producing output,
-- make sure it's a valid YAML.
'  lua says: hello'
---
- '  lua says: hello'
...
-- # What's in the box?
t = {} for n in pairs(box) do table.insert(t, tostring(n)) end table.sort(t)
---
...
t
---
- - cfg
  - counter
  - error
  - index
  - info
  - net
  - pack
  - raise
  - rollback
  - schema
  - slab
  - snapshot
  - space
  - stat
  - tuple
  - unpack
...
t = nil
---
...
----------------
-- # box.raise
----------------
--# stop server default
--# start server default
-- during server starting there could be exceptions,
-- therefore box.raise() call can throw and can not throw,
-- that's why we can't test box.raise() result
1 + 1
---
- 2
...
box.raise(123, 'test')
---
- error: test
...
box.raise(0, 'the other test')
---
- error: 'box.raise(): unknown error code'
...
box.raise(12, 345)
---
- error: '345'
...
box.raise()
---
- error: '345'
...
box.raise()
---
- error: '345'
...
space = box.space.tweedledum
---
...
----------------
-- # box.stat
----------------
t = {}
---
...
--# setopt delimiter ';'
for k, v in pairs(box.stat()) do
    table.insert(t, k)
end;
---
...
for k, v in pairs(box.stat().DELETE) do
    table.insert(t, k)
end;
---
...
for k, v in pairs(box.stat.DELETE) do
    table.insert(t, k)
end;
---
...
t;
---
- - DELETE
  - SELECT
  - REPLACE
  - INSERT
  - AUTH
  - CALL
  - UPDATE
  - total
  - rps
  - total
  - rps
...
----------------
-- # box.space
----------------
type(box);
---
- table
...
type(box.space);
---
- table
...
t = {};
---
...
for i, v in pairs(space.index[0].parts[0]) do
    table.insert(t, tostring(i)..' : '..tostring(v))
end;
---
...
t;
---
- - 'type : NUM'
  - 'fieldno : 0'
...
----------------
-- # box.space
----------------
string.match(tostring(box.slab.info()), '^table:') ~= nil;
---
- true
...
box.slab.info().arena_used >= 0;
---
- true
...
box.slab.info().arena_size > 0;
---
- true
...
string.match(tostring(box.slab.info().slabs), '^table:') ~= nil;
---
- true
...
t = {};
---
...
for k, v in pairs(box.slab.info()) do
    table.insert(t, k)
end;
---
...
t;
---
- - slabs
  - arena_size
  - arena_used
...
----------------
-- # box.error
----------------
t = {}
for k,v in pairs(box.error) do
   table.insert(t, 'box.error.'..tostring(k)..' : '..tostring(v))
end;
---
...
t;
---
- - 'box.error.ER_CREATE_FUNCTION : 50'
  - 'box.error.ER_PROC_RET : 21'
  - 'box.error.ER_INVALID_ORDER : 68'
  - 'box.error.ER_TUPLE_FORMAT_LIMIT : 16'
  - 'box.error.ER_FUNCTION_MAX : 54'
  - 'box.error.ER_TUPLE_NOT_FOUND : 4'
  - 'box.error.ER_ACCESS_DENIED : 42'
  - 'box.error.ER_LAST_DROP : 15'
  - 'box.error.ER_ARG_TYPE : 26'
  - 'box.error.ER_INVALID_MSGPACK : 20'
  - 'box.error.ER_RELOAD_CFG : 58'
  - 'box.error.ER_USER_EXISTS : 46'
  - 'box.error.ER_MEMORY_ISSUE : 2'
  - 'box.error.ER_SPACE_FIELD_COUNT : 38'
  - 'box.error.ER_NONMASTER : 6'
  - 'box.error.ER_NO_SUCH_USER : 45'
  - 'box.error.ER_EXACT_MATCH : 19'
  - 'box.error.ER_CREATE_USER : 43'
  - 'box.error.ER_FUNCTION_EXISTS : 52'
  - 'box.error.ER_CLUSTER_ID_MISMATCH : 63'
  - 'box.error.ER_NO_SUCH_FUNCTION : 51'
  - 'box.error.ER_FIBER_STACK : 30'
  - 'box.error.ER_FUNCTION_ACCESS_DENIED : 53'
  - 'box.error.ER_CFG : 59'
  - 'box.error.ER_TUPLE_NOT_ARRAY : 22'
  - 'box.error.ER_CLUSTER_ID_IS_RO : 65'
  - 'box.error.ER_MORE_THAN_ONE_TUPLE : 41'
  - 'box.error.ER_NO_SUCH_SPACE : 36'
  - 'box.error.ER_NO_SUCH_INDEX : 35'
  - 'box.error.ER_TUPLE_FOUND : 3'
  - 'box.error.ER_ACCESS_DENIED : 42'
  - 'box.error.ER_CREATE_SPACE : 9'
  - 'box.error.ER_FIELD_TYPE : 23'
  - 'box.error.ER_OK : 0'
  - 'box.error.ER_WAL_IO : 40'
  - 'box.error.ER_INJECTION : 8'
  - 'box.error.ER_NO_SUCH_ENGINE : 57'
  - 'box.error.ER_INDEX_TYPE : 13'
  - 'box.error.ER_UNKNOWN_SCHEMA_OBJECT : 49'
  - 'box.error.ER_SPACE_ACCESS_DENIED : 55'
  - 'box.error.ER_KEY_PART_COUNT : 31'
  - 'box.error.ER_SPACE_EXISTS : 10'
  - 'box.error.ER_TUPLE_IS_TOO_LONG : 27'
  - 'box.error.ER_UNKNOWN_NODE : 62'
  - 'box.error.ER_MODIFY_INDEX : 14'
  - 'box.error.ER_MISSING_REQUEST_FIELD : 69'
  - 'box.error.ER_NODE_ID_IS_RO : 66'
  - 'box.error.ER_INVALID_UUID : 64'
  - 'box.error.ER_SECONDARY : 7'
  - 'box.error.ER_IDENTIFIER : 70'
  - 'box.error.ER_DROP_SPACE : 11'
  - 'box.error.ER_SPLICE : 25'
  - 'box.error.ER_UNKNOWN_REQUEST_TYPE : 48'
  - 'box.error.ER_PASSWORD_MISMATCH : 47'
  - 'box.error.ER_KEY_PART_TYPE : 18'
  - 'box.error.ER_UNKNOWN_UPDATE_OP : 28'
  - 'box.error.ER_LOCAL_NODE_IS_NOT_ACTIVE : 61'
  - 'box.error.ER_UNSUPPORTED : 5'
  - 'box.error.ER_PROC_LUA : 32'
  - 'box.error.ER_INDEX_FIELD_COUNT : 39'
  - 'box.error.ER_DROP_USER : 44'
  - 'box.error.ER_UPDATE_FIELD : 29'
  - 'box.error.ER_ALTER_SPACE : 12'
  - 'box.error.ER_FIELD_TYPE_MISMATCH : 24'
  - 'box.error.ER_NO_SUCH_FIELD : 37'
  - 'box.error.ER_NO_SUCH_PROC : 33'
  - 'box.error.ER_SOPHIA : 60'
  - 'box.error.ER_NO_SUCH_TRIGGER : 34'
  - 'box.error.ER_ILLEGAL_PARAMS : 1'
  - 'box.error.ER_DROP_PRIMARY_KEY : 17'
  - 'box.error.ER_USER_MAX : 56'
...
--# setopt delimiter ''
-- A test case for Bug#901674
-- No way to inspect exceptions from Box in Lua
--
function myinsert(tuple) box.space.tweedledum:insert(tuple) end
---
...
pcall(myinsert, {99, 1, 1953719668})
---
- true
...
pcall(myinsert, {1, 'hello'})
---
- true
...
pcall(myinsert, {1, 'hello'})
---
- false
- Duplicate key exists in unique index 0
...
box.space.tweedledum:truncate()
---
...
myinsert = nil
---
...
-- A test case for gh-37: print of 64-bit number
1, 1
---
- 1
- 1
...
tonumber64(1), 1
---
- 1
- 1
...
-- Testing 64bit
tonumber64(123)
---
- 123
...
tonumber64('123')
---
- 123
...
type(tonumber64('123')) == 'cdata'
---
- true
...
tonumber64('9223372036854775807') == tonumber64('9223372036854775807')
---
- true
...
tonumber64('9223372036854775807') - tonumber64('9223372036854775800')
---
- 7
...
tonumber64('18446744073709551615') == tonumber64('18446744073709551615')
---
- true
...
tonumber64('18446744073709551615') + 1
---
- 0
...
tonumber64(-1)
---
- 18446744073709551615
...
tonumber64('184467440737095516155')
---
- error: 'lua_tointeger64: bad argument'
...
string.byte(box.pack('p', tonumber64(123)))
---
- 123
...
--  A test case for Bug#1061747 'tonumber64 is not transitive'
tonumber64(tonumber64(2))
---
- 2
...
tostring(tonumber64(tonumber64(3)))
---
- 3ULL
...
--  A test case for Bug#1131108 'tonumber64 from negative int inconsistency'
tonumber64(-1)
---
- 18446744073709551615
...
tonumber64(-1LL)
---
- 18446744073709551615
...
tonumber64(-1ULL)
---
- 18446744073709551615
...
-1
---
- -1
...
-1LL
---
- -1
...
-1ULL
---
- 18446744073709551615
...
tonumber64(-1.0)
---
- 18446744073709551615
...
6LL - 7LL
---
- -1
...
--  dostring()
dostring('abc')
---
- error: '[string "abc"]:1: ''='' expected near ''<eof>'''
...
dostring('abc=2')
---
...
dostring('return abc')
---
- 2
...
dostring('return ...', 1, 2, 3)
---
- 1
- 2
- 3
...
--  A test case for Bug#1043804 lua error() -> server crash
error()
---
- error:
...
--  A test case for bitwise operations
bit.lshift(1, 32)
---
- 1
...
bit.band(1, 3)
---
- 1
...
bit.bor(1, 2)
---
- 3
...
-- A test case for box.counter
space = box.space.tweedledum
---
...
box.counter.inc(space.id, {1})
---
- 1
...
space:get{1}
---
- [1, 1]
...
box.counter.inc(space.id, {1})
---
- 2
...
box.counter.inc(space.id, {1})
---
- 3
...
space:get{1}
---
- [1, 3]
...
box.counter.dec(space.id, {1})
---
- 2
...
box.counter.dec(space.id, {1})
---
- 1
...
box.counter.dec(space.id, {1})
---
- 0
...
space:get{1}
---
...
space:truncate()
---
...
dofile('fifo.lua')
---
...
fifomax
---
- 5
...
fifo_push(space, 1, 1)
---
- [1, 3, 4, 1, 0, 0, 0, 0]
...
fifo_push(space, 1, 2)
---
- [1, 4, 5, 1, 2, 0, 0, 0]
...
fifo_push(space, 1, 3)
---
- [1, 5, 6, 1, 2, 3, 0, 0]
...
fifo_push(space, 1, 4)
---
- [1, 6, 7, 1, 2, 3, 4, 0]
...
fifo_push(space, 1, 5)
---
- [1, 7, 3, 1, 2, 3, 4, 5]
...
fifo_push(space, 1, 6)
---
- [1, 3, 4, 6, 2, 3, 4, 5]
...
fifo_push(space, 1, 7)
---
- [1, 4, 5, 6, 7, 3, 4, 5]
...
fifo_push(space, 1, 8)
---
- [1, 5, 6, 6, 7, 8, 4, 5]
...
fifo_top(space, 1)
---
- 8
...
space:delete{1}
---
- [1, 5, 6, 6, 7, 8, 4, 5]
...
fifo_top(space, 1)
---
- 0
...
space:delete{1}
---
- [1, 3, 3, 0, 0, 0, 0, 0]
...
space:drop()
---
...
----------------
-- # yaml encode/decode on cdata
----------------
ffi = require('ffi')
---
...
ffi.new('uint8_t', 128)
---
- 128
...
ffi.new('int8_t', -128)
---
- -128
...
ffi.new('uint16_t', 128)
---
- 128
...
ffi.new('int16_t', -128)
---
- -128
...
ffi.new('uint32_t', 128)
---
- 128
...
ffi.new('int32_t', -128)
---
- -128
...
ffi.new('uint64_t', 128)
---
- 128
...
ffi.new('int64_t', -128)
---
- -128
...
ffi.new('char', 128)
---
- -128
...
ffi.new('char', -128)
---
- -128
...
ffi.new('bool', true)
---
- true
...
ffi.new('bool', false)
---
- false
...
ffi.new('float', 1.23456)
---
- 1.2345600128174
...
ffi.new('float', 1e10)
---
- 10000000000
...
ffi.new('double', 1.23456)
---
- 1.23456
...
ffi.new('double', 1e10)
---
- 10000000000
...
ffi.cast('void *', 0)
---
- null
...
ffi.cast('void *', 0xabcdef)
---
- 'cdata<void *>: 0x00abcdef'
...
ffi.cdef([[struct test { int a; }; ]])
---
...
ffi.cast('struct test *', 0)
---
- 'cdata<struct test *>: NULL'
...
--# setopt delimiter ';'
type(ffi.metatype('struct test', {
    __index = {
        totable = function(test)
            return { 'yaml totable test = ' .. test.a }
        end
    }
}));
---
- cdata
...
--# setopt delimiter ''
-- custom totable function will be called by yaml.encode
ffi.new('struct test', { a = 15 })
---
- - yaml totable test = 15
...
