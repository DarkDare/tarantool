session = require('session')
---
...
fiber = require('fiber')
---
...
space = box.schema.create_space('tweedledum')
---
...
space:create_index('primary', { type = 'hash' })
---
...
session.exists(session.id())
---
- 1
...
session.exists()
---
- error: 'session.exists(sid): bad arguments'
...
session.exists(1, 2, 3)
---
- error: 'session.exists(sid): bad arguments'
...
session.exists(1234567890)
---
- 0
...
-- check session.id()
session.id() > 0
---
- true
...
f = fiber.create(function() fiber.detach() failed = session.id() == 0 end)
---
...
fiber.resume(f)
---
...
failed
---
- true
...
f1 = fiber.create(function() if session.id() == 0 then failed = true end end)
---
...
fiber.resume(f1)
---
- true
...
failed
---
- true
...
session.peer() == session.peer(session.id())
---
- true
...
-- check on_connect/on_disconnect triggers
function noop() end
---
...
session.on_connect(noop)
---
...
session.on_disconnect(noop)
---
...
-- check it's possible to reset these triggers
function fail() error('hear') end
---
...
session.on_connect(fail, noop)
---
...
session.on_disconnect(fail, noop)
---
...
-- check on_connect/on_disconnect argument count and type
session.on_connect()
---
- error: 'trigger reset: incorrect arguments'
...
session.on_disconnect()
---
- error: 'trigger reset: incorrect arguments'
...
session.on_connect(function() end, function() end)
---
- error: Trigger is not found
...
session.on_disconnect(function() end, function() end)
---
- error: Trigger is not found
...
session.on_connect(1, 2)
---
- error: 'trigger reset: incorrect arguments'
...
session.on_disconnect(1, 2)
---
- error: 'trigger reset: incorrect arguments'
...
session.on_connect(1)
---
- error: 'trigger reset: incorrect arguments'
...
session.on_disconnect(1)
---
- error: 'trigger reset: incorrect arguments'
...
-- use of nil to clear the trigger
session.on_connect(nil, fail)
---
...
session.on_disconnect(nil, fail)
---
...
-- check how connect/disconnect triggers work
function inc() active_connections = active_connections + 1 end
---
...
function dec() active_connections = active_connections - 1 end
---
...
session.on_connect(inc)
---
...
session.on_disconnect(dec)
---
...
active_connections = 0
---
...
--# create connection con_one to default
active_connections
---
- 1
...
--# create connection con_two to default
active_connections
---
- 2
...
--# drop connection con_one
--# drop connection con_two
fiber.sleep(0) -- yield
---
...
active_connections
---
- 0
...
session.on_connect(nil, inc)
---
...
session.on_disconnect(nil, dec)
---
...
-- write audit trail of connect/disconnect into a space
function audit_connect() box.space['tweedledum']:insert{session.id()} end
---
...
function audit_disconnect() box.space['tweedledum']:delete{session.id()} end
---
...
session.on_connect(audit_connect)
---
...
session.on_disconnect(audit_disconnect)
---
...
--# create connection con_three to default
--# set connection con_three
space:get{session.id()}[1] == session.id()
---
- true
...
--# set connection default
--# drop connection con_three
-- cleanup
session.on_connect(nil, audit_connect)
---
...
session.on_disconnect(nil, audit_disconnect)
---
...
active_connections
---
- 0
...
space:drop()
---
...
session.uid()
---
- 1
...
session.user()
---
- admin
...
fiber = nil
---
...
session = nil
---
...
