<!DOCTYPE book [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="server-administration">
<title>Server administration</title>
<para>
    Typical server administration tasks include starting and stopping
    the server, reloading configuration, taking snapshots, log rotation.
</para>
<section xml:id="signal-handling">
<title>Server signal handling</title>
<para>
  The server is configured to shut down gracefully on SIGTERM and
  SIGINT (keyboard interrupt) or SIGHUP. SIGUSR1 can be used to
  save a snapshot.
  All other signals are blocked or ignored.
  The signals are processed in the main event loop. Thus, if the
  control flow never reaches the event loop (thanks to a runaway stored
  procedure), the server stops responding to any signal, and
  can only be killed with SIGKILL (this signal can not be ignored).
</para>
</section>

<section xml:id="utility-tarantool">

<title>Utility <code>tarantool</code> &mdash; using the server as a client</title>

<para>
If <code>tarantool</code> is started without an initialization file, then
there will be a prompt ("<code>tarantool&gt;</code>") and it will be possible
to enter requests. When used this way, <code>tarantool</code> is a client
program as well as a server program.
</para>
<para>
This section shows all legal syntax for the tarantool program, with short notes and examples.
Other client programs may have similar options and request syntaxes.
Some of the information in this section is duplicated in the Configuration Reference chapter.
</para>

<para>
<bridgehead renderas="sect4">Conventions used in this section</bridgehead>

Tokens are character sequences which are treated as syntactic units within requests.

Square brackets <code>[</code> and <code>]</code> enclose optional syntax.
Three dots in a row <code>...</code> mean the preceding tokens may be repeated.
A vertical bar <code>|</code> means the preceding and following tokens are mutually exclusive alternatives.
</para>

<para>
<bridgehead renderas="sect4">Options when starting client from the command line</bridgehead>

General form: <code>tarantool</code> or <code>tarantool <replaceable>file-name</replaceable></code>
or <code>tarantool <replaceable>option</replaceable>... </code>.
</para>
<para>
File-name can be any script containing code for initializing.
Effect: The code in the file is executed during startup.
Example: <code>init.lua</code>.
Notes: If a script is used, there will be no prompt. The script should contain
configuration information including "admin_port=..." or "primary_port=..." so
that a separate program can connect to the server via one of the ports.
</para>
<para>
Option is one of the following (in alphabetical order by the long form of the option):
</para>

<variablelist>
  <varlistentry>
    <term xml:id="utility-tarantool-help" xreflabel="utility-tarantool-help">--help</term>
    <listitem><para>
    Syntax: short form: <code>-?</code>
    long form: <code>--h[elp]</code>.
    Effect: Client displays a help message including a list of options.
    Example: <code>--help</code>
    Notes: The program stops after displaying the help.
    </para></listitem>
  </varlistentry>

  <varlistentry>
    <term xml:id="utility-tarantool-version" xreflabel="utility-tarantool-version">--version</term>
    <listitem><para>
    Syntax: short form: <code>-V</code>
    long form: <code>--v[ersion]</code>.
    Effect: Client displays version information.
    Example: <code>--version</code>
    Notes: The program stops after displaying the version.
    </para></listitem>
  </varlistentry>
</variablelist>

<para>
<bridgehead renderas="sect4">Tokens for use within requests</bridgehead>
</para>
<para>
Keywords are: Character sequences containing only letters of the English alphabet.
              Examples: SETOPT.
              Notes: Keywords are case insensitive so SETOPT and Setopt are the same thing.
</para>
<para>
Procedure identifiers are: Any sequence of letters, digits, or underscores which is
                           legal according to the rules for Lua identifiers.
</para>
<para>
String literals are: Any sequence of zero or more characters enclosed in single quotes.
                     Examples: 'Hello, world', 'A'.
</para>
<para>
Numeric literals are: Character sequences containing only digits, optionally preceded by + or -.
                      Examples: 55, -.
                      Notes: Tarantool NUM data type is unsigned, so -1 is understood as a large unsigned number.
</para>
<para>
Single-byte tokens are: * or , or ( or ).
                      Examples: * , ( ).
</para>
<para>
Tokens must be separated from each other by one or more spaces, except that
spaces are not necessary around single-byte tokens or string literals.
</para>

<para xml:id="utility-tarantool-delim">
<bridgehead renderas="sect4">Requests in alphabetical order</bridgehead>
Generally requests are entered following the prompt in interactive mode while
tarantool is running. (A prompt will be the word tarantool and a greater-than
sign, for example <code>tarantool&gt;</code>). The end-of-request marker is
a newline (line feed).
</para>

<variablelist>
  <varlistentry>
    <term xml:id="utility-tarantool-exit" xreflabel="utility-tarantool-exit">EXIT</term>
    <listitem><para>
    Syntax: <code>control-C</code>.
    Effect: The tarantool program receives a SIGINT signal and stops.
    Example:  <code>^C</code>.
    Notes: The preferable way to stop the program is to send an "os.exit()" request.
    </para></listitem>
  </varlistentry>

  <varlistentry>
    <term xml:id="utility-tarantool-setopt" xreflabel="utility-tarantool-setopt">SETOPT</term>
    <listitem><para>
    Syntax: <code>SETOPT DELIMITER = <replaceable>string-literal</replaceable></code>.
          The string must be a value in single quotes.
    Effect: string becomes end-of-request delimiter, so newline alone is not treated as end of request.
    Example:  <code>SETOPT DELIMITER = '!'</code>.
    Notes: This has been temporarily disabled.
    </para></listitem>
  </varlistentry>
   
  <varlistentry>
    <term xml:id="utility-tarantool-lua" xreflabel="utility-tarantool-lua">LUA</term>
    <listitem><para>
    Syntax: <code><replaceable>anything-else</replaceable></code>.
    Effect: The client tells the server to execute the tokens as Lua requests.
    Example:  <code>"hello".." world"</code>.
    </para></listitem>
  </varlistentry>
   
</variablelist>

<para>
For a condensed Backus-Naur Form [BNF] description of the suggested form of client requests, see
    <link xlink:href="https://github.com/tarantool/tarantool/blob/master/doc/box-protocol.txt"><filename>doc/box-protocol.txt</filename></link>
    and
    <link xlink:href="https://github.com/tarantool/tarantool/blob/master/doc/sql.txt"><filename>doc/sql.txt</filename></link>.
</para>


<para>
In <emphasis>interactive</emphasis> mode, one types requests and gets results.
Typically the requests
are typed in by the user following prompts.
Here is an example of an interactive-mode tarantool client session:

<programlisting>
<prompt>$ </prompt>tarantool
                [ tarantool will display an introductory message including version number here ]
tarantool> box.cfg{admin_port=3313, primary_port=3301}
                [ tarantool will display configuration information here ]
tarantool> s = box.schema.create_space('space0')
                [ tarantool may display an in-progress message here ]
---
...
tarantool> i = s:create_index('primary', {type = 'hash', parts = {0, 'NUM'}})
---
...
tarantool> box.space.space0:insert{1,'My first tuple'}
---
- [1, 'My first tuple']
...
tarantool> box.space.space0:select(1)
---
- - [1, 'My first tuple']
...
tarantool> box.space.space0:drop()
---
...
tarantool> os.exit()
2014-04-30 10:28:00.886 [20436] main/101/spawner I> Exiting: master shutdown
<prompt>$ </prompt>
</programlisting>
Explanatory notes about what tarantool displayed in the above example:
</para>
<para>
* Many requests return typed objects.
    In the case of "box.cfg{admin_port=3313, primary_port=3301}",
    this result is displayed on the screen.
    If the request had assigned the result to a variable, for example
    "c = box.cfg{admin_port=3313, primary_port=3301}", then
    the result would not have been displayed on the screen.
</para>
<para>
* A display of an object always begins with "---" and ends with "...".
</para>
<para>
* The insert request returns an object of type = tuple, so the object display line
    begins with a single dash ('- '). However, the select request returns
    an object of type = <emphasis>table of tuples</emphasis>, so the object display line
    begins with two dashes ('- - ').
</para>

</section>

<section xml:id="tarantool_deploy">
<title>Utility <code>tarantool_deploy</code></title>
<para>
With tarantool_deploy one can set up so that, during system boot,
one or more instances of the tarantool server will start.
This utility is for use on Red Hat or CentOS where Tarantool
was installed using <code>rpm --install</code>.
</para>
<para>
Technically, tarantool_deploy will place instructions in <filename>/etc/init.d</filename>
which will initiate tarantool with appropriate options and
with settings that maximize resource usage.
The root password is necessary. These options are available,
as shown by <code>tarantool_deploy --help</code>:
<programlisting>
Tarantool deployment script: add more Tarantool instances.
usage: tarantool_deploy.sh [options] &lt;instance&gt;

  --prefix &lt;path&gt;       installation path (/usr)
  --prefix_etc &lt;path&gt;   installation etc path (/etc)
  --prefix_var &lt;path&gt;   installation var path (/var)

  --status              display deployment status
  --dry                 don't create anything, show commands

  --debug               show commands
  --yes                 don't prompt
  --help                display this usage
</programlisting>
</para>
<para>
The default prefixes (<filename>/usr</filename> and <filename>/etc</filename> and <filename>/var</filename>) are appropriate
if a Tarantool installation was done with default settings,
for example tarantool should be in <filename>/usr/bin</filename>.
The only necessary argument is the "instance", which is an
arbitrary numeric identification formatted as digit.digit.
The following is a sample run:
<programlisting><prompt>$ </prompt>tarantool_deploy.sh 0.1
tarantool_deploy.sh: About to deploy Tarantool instance 0.1.
tarantool_deploy.sh: Continue? [n/y]
y
tarantool_deploy.sh: &gt;&gt;&gt; deploy instance 0.1
tarantool_deploy.sh: &gt;&gt;&gt; updating deployment config
tarantool_deploy.sh: done
</programlisting>
</para>
</section>

<section xml:id="os-install-notes">
<title>System-specific administration notes</title>
<blockquote><para>
  This section will contain information about issue or features which exist
  on some platforms but not others -- for example, on certain versions of a
  particular Linux distribution.
</para></blockquote>

  <section xml:id="Debian">
    <title>Administrating with Debian GNU/Linux and Ubuntu</title>
    <para>
        Setting up an instance: ln -s /etc/tarantool/instances.available/instance-name.cfg /etc/tarantool/instances.enabled/
    </para>
    <para>
        Starting all instances: service tarantool start
    </para>
    <para>
        Stopping all instances: service tarantool stop
    </para>
    <para>
        Starting/stopping one instance: service tarantool-instance-name start/stop
    </para>
  </section>
  <section xml:id="rpm-based-distros">
    <title>Fedora, RHEL, CentOS</title>
    <para>
        There are no known permanent issues.
        For transient issues, go to <link xlink:href="https://github.com/tarantool/tarantool/issues">http://github.com/tarantool/tarantool/issues</link> and enter "RHEL" or "CentOS" or "Fedora" or "Red Hat" in the search box.
    </para>
  </section>

  <section xml:id="FreeBSD">
    <title>FreeBSD</title>
    <para>
        There are no known permanent issues.
        For transient issues, go to <link xlink:href="https://github.com/tarantool/tarantool/issues">http://github.com/tarantool/tarantool/issues</link> and enter "FreeBSD" in the search box.
    </para>
  </section>

  <section xml:id="mac-os-x">
    <title>Mac OS X</title>
    <para>
        There are no known permanent issues.
        For transient issues, go to <link xlink:href="https://github.com/tarantool/tarantool/issues">http://github.com/tarantool/tarantool/issues</link> and enter "OS X" in the search box.
    </para>
  </section>

</section>

<section xml:id="authentication">

<title>Authentication and access control</title>

<para>
Understanding the details of security is primarily an issue for administrators,
but ordinary users should at least skim this section so that they will have an
idea of how Tarantool makes it possible for administrators to prevent
unauthorized access to the database and to certain functions.
</para>

<para>
Briefly: there is a method to guarantee with password checks that users really
are who they say they are ("authentication"). There is a _user space where
user names and password-hashes are stored. There are functions for saying
that certain users are allowed to do certain things ("privileges"). There
is a _priv space where privileges are stored. Whenever a user tries to do
an operation, there is a check whether the user has the privilege to do
the operation ("access control").
</para>

<para>
<bridgehead renderas="sect4">Passwords</bridgehead>
Each user may have a password.
The password is any alphanumeric string.
Administrators should advise users to choose long unobvious passwords,
but it is ultimately up to the users to choose or change
their own passwords.
</para>

<para>
Tarantool passwords are stored in the _user space with a
<link xlink:href="https://en.wikipedia.org/wiki/Cryptographic_hash">Cryptographic hash function</link>
so that, if the password is 'x', the stored hashed-password is a long string like
'lL3OvhkIPOKh+Vn9Avlkx69M/Ck='.
When a client connects to a Tarantool server, the server sends a random
<link xlink:href="https://en.wikipedia.org/wiki/Salt_%28cryptography%29">Salt Value</link>
which the client must mix with the hashed-password before sending
to the server.
Thus the original value 'x' is never stored anywhere except in the
user's head, and the hashed value is never passed passed down a
network wire except when mixed with a random salt.
This system prevents malicious onlookers from finding passwords
by snooping in the log files or snooping on the wire.
It is the same system that <link xlink:href="http://dev.mysql.com/doc/refman/4.1/en/password-hashing.html">MySQL introduced several years ago</link>
which has proved adequate for medium-security installations.
Nevertheless administrators should warn users that no system
is foolproof against determined long-term attacks, so passwords
should be guarded and changed occasionally.
</para>

<para>
Notes: To get the hash-password of a string 'X', say <code>box.schema.user.password('X')</code>.
To see more about the details of the algorithm for the purpose of writing a new client application, read 
<link xlink:href="https://github.com/tarantool/tarantool/blob/master/src/scramble.h">the scramble.h header file</link>.
</para>

<para>
<bridgehead renderas="sect4">Users and the _user space</bridgehead>
The fields in the _user space are:
a numeric id, a string, the user name, and the optional password.
</para>

<para>
There are two special users: 'guest' (user id = 0) and  'admin' (user id = 1).
They are defined in advance.
They cannot be dropped.
(The 'guest' user is a default which usually has minimum privileges;
the 'admin' user is an administrator which always has maximum privileges.)
</para>

<para>
To select a row from the _user space, use <code>box.select</code>.
For example, here is what happens with a select for user id = 0,
which is the 'guest' user, without a password:
<programlisting><prompt>tarantool&gt;</prompt> box.space._user:select{0}
---
- - [0, '', 'guest']
...</programlisting></para>

<para>
To change tuples in the user space, do not use ordinary <code>box.space</code> functions
for insert or update or delete -- the _user space is special so
there are special functions which have appropriate error checking.
</para>

<para>
To create a new user, say
<code>box.schema.user.create(<replaceable>user-name</replaceable>)</code>
or
<code>box.schema.user.create(<replaceable>user-name</replaceable>', {password=<replaceable>password</replaceable>})</code>.
</para>

<para>
To drop a user, say
<code>box.schema.user.drop(<replaceable>user-name</replaceable>)</code>.
</para>

<para>
For example, here is a session which creates a new user with
a strong password, selects from the tuple in
the _user space, and then drops the user.
<programlisting><prompt>tarantool&gt;</prompt> box.schema.user.create('Elizabeth Browning', {password = 'Iwtso65$SDS?'})
---
...
<prompt>tarantool&gt;</prompt> box.space._user:select{4}
---
- - [4, '', 'Elizabeth Browning', {'chap-sha1': 'zyy3yArGOQ4T40PnsL6yPGlgYrU='}]
...
<prompt>tarantool&gt;</prompt> box.schema.user.drop('Elizabeth Browning')
---
...</programlisting></para>

<para>
Notes: The maximum number of users is 32.
</para>

<para>
<bridgehead renderas="sect4">Privileges and the _priv space</bridgehead>
The fields in the _priv space are:
the numeric id of the user who gave the privilege ("grantor_id"),
the numeric id of the user who received the privilege ("grantee_id"),
the id of the object,
the type of object -- "space" or "function" or "universe",
the type of operation -- "read" or "write" or "execute" or a combination such as "read,write,execute".
</para>

<para>
The function for granting a privilege is:
<code>box.schema.user.grant(<replaceable>user-name-of-grantee</replaceable>, <replaceable>operation-type</replaceable>, <replaceable>object-type</replaceable>, '<replaceable>>object-name</replaceable>)</code>
or
<code>box.schema.user.grant(<replaceable>user-name-of-grantee</replaceable>, <replaceable>operation-type</replaceable>, 'universe')</code>.
</para>

<para>
The function for revoking a privilege is:
<code>box.schema.user.revoke(<replaceable>user-name-of-grantee</replaceable>, <replaceable>operation-type</replaceable>, <replaceable>object-type</replaceable>, '<replaceable>>object-name</replaceable>)</code>.
</para>

<para>
For example, here is a session where the admin user gave
the guest user the privilege to read from a
space named space55, and then took the privilege away:
<programlisting><prompt>tarantool&gt;</prompt> box.schema.user.grant('guest', 'read', 'space', 'space55')
---
...
<prompt>tarantool&gt;</prompt> box.schema.user.revoke('guest', 'read', 'space', 'space55')
---
...</programlisting></para>

<para>
Notes: Generally privileges are granted or revoked by the owner of the object
(the user who created it), or by the 'admin' user.
Before dropping any objects or users, steps should be taken to ensure
that all their associated privileges have been revoked.
Only the 'admin' user can grant privileges for the 'universe'.
</para>

<para>
<bridgehead renderas="sect4">Functions and the _func space</bridgehead>
The fields in the _func space are:
the numeric function id, a number, and the function name.
</para>

<para>
The _func space does not include the function's body.
One continues to create Lua functions in the usual way,
by saying "<code>function <replaceable>function_name</replaceable> () ... end</code>", without
adding anything in the _func space. The _func space only
exists for storing function tuples so that their names
can be used within grant/revoke functions.
</para>

<para>
The function for creating a _func tuple is:
<code>box.schema.func.create(<replaceable>function-name</replaceable>)</code>.
</para>

<para>
The function for dropping a _func tuple is:
<code>box.schema.func.drop(<replaceable>function-name</replaceable>)</code>.
</para>

<para>
In the following example, a function named 'f7' is created,
then it is put in the _func space, then it is used in a
box.schema.user.grant function, then it is dropped:
<programlisting><prompt>tarantool&gt;</prompt> function f7() box.session.uid() end
---
...
<prompt>tarantool&gt;</prompt> box.schema.func.create('f7')
---
...
<prompt>tarantool&gt;</prompt> box.schema.user.grant('guest', 'execute', 'function', 'f7')
---
...
<prompt>tarantool&gt;</prompt> box.schema.func.drop('f7')
---
...</programlisting></para>

<para>
<bridgehead renderas="sect4">box.session and security</bridgehead>

After a connection has taken place, the user has access to a "session" object
which has several functions. The ones which are of interest for security
purposes are:
<programlisting>box.session.uid()           #returns the id of the current user
box.session.user()          #returns the name of the current user
box.session.su(<replaceable>user-name</replaceable>)   #allows changing current user to 'user-name'</programlisting></para>

</section>

</chapter>

<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
