<!DOCTYPE book [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xml:id="language-reference">

<title>Language reference</title>
<blockquote><para>
  This chapter provides a reference of Tarantool data operations
  and administrative commands.
</para></blockquote>
<bridgehead renderas="sect2">Digression: primary and administrative ports</bridgehead>
<para>
  During start up, the server can allow connections on up to two TCP ports:
  <itemizedlist>
    <listitem><para>
      Primary port. This port is for handling requests in the
      <link xlink:href="https://github.com/tarantool/tarantool/blob/master/doc/box-protocol.txt" xlink:title="A complete BNF of Tarantool client/server protocol">native Tarantool protocol</link>
      (also called the "binary protocol"), and provides full data access.
      </para>
      <para>
      The default value of the port is <literal>3303</literal>,
      as defined in the <olink targetptr="primary_port"/>
      configuration option.
    </para></listitem>
    <listitem><para>
      Administrative port, which is for handling requests in unconverted text (also called the "text protocol"),
      which defaults to <literal>3313</literal>,
      and is defined in the <olink targetptr="admin_port"/>
      configuration option.
    </para></listitem>
  </itemizedlist>
  Traditionally, in the absence of authentication,
  ordinary users could be blocked from
  doing administrative operations by simply having them
  blocked from access to the administrative port.
  The client, however, had to be aware of
  the separation, and the <command>tarantool</command> command line
  client automatically selected the correct port
  with the help of a simple regular expression. SELECTs, UPDATEs,
  INSERTs, DELETEs and CALLs were sent to the primary port.
  Lua commands were sent to the administrative port.
</para>

<section xml:id="data-manipulation">
  <title>Data manipulation</title>

  <para>
    The four basic "data-manipulation" requests are: insert() / replace(),
    update(), delete(), select(). They all, including
    insert() and update() and delete(), may return data.
    There are other request types for scanning multiple keys.
 </para>
  <para>
    The update() function supports operations on fields &mdash;
    assignment, arithmetic operations (the field must be numeric),
    cutting and pasting fragments of a field, &mdash; as well as
    operations on a tuple: push and pop of a field at the tail of
    a tuple, deletion and insertion of a field.  Multiple
    operations can be combined into a single update, and in this
    case they are performed atomically. Each operation expects
    field number as its first argument. When a sequence of changes
    is present, field identifier in each operation is assumed to
    be relative to the most recent state of the tuple, i.e. as if
    all previous operations in a multi-operation update have
    already been applied. In other words, it's always safe to
    merge multiple update() invocations into a single one, with no
    change in semantics.
  </para>
  <para>Tarantool protocol was designed with focus on asynchronous
    I/O and easy integration with proxies. Each client
    request starts with a 12-byte binary header, containing three
    fields: request type, length, and a numeric id.
  </para>
 <para>
    The mandatory length, present in request header simplifies
    client or proxy I/O.  A response to a request is sent to the
    client as soon as it is ready. It always carries in its header
    the same type and id as in the request. The id makes it
    possible to match a request to a response, even if the latter
    arrived out of order.
  </para>
  <para>For the insert() and update() and delete() operations,
    it is mandatory to pass the primary-key value.
    For the select() operation, either a primary-key value or a
    secondary-key value (possibly multi-part) may be passed.
    All the data-manipulation functions operate on whole tuple(s),
    except update() -- for update() one only needs
    to list the fields that are actually changed.
  </para>
  <para>Unless implementing a client driver, one needn't
    concern oneself with the complications of the binary
    protocol. <olink targetptr="connectors">Language-specific
    drivers</olink> provide a friendly way to store domain
    language data structures in Tarantool.
    A complete description of the binary protocol
    is maintained in annotated Backus-Naur
    form in the source tree: please see
    <link xlink:href="https://github.com/tarantool/tarantool/blob/master/doc/box-protocol.txt"><filename>doc/box-protocol.txt</filename></link>.
  </para>
</section>

<section xml:id="administrative-console">
  <title>Administrative console</title>
  <para>
    The administrative console is simply an outlet of the Tarantool
    Lua interpreter.  You can connect to the administrative port
    using any <command>telnet</command> client, or a tool like
    <command>rlwrap</command>, if access to readline features is
    desired. Additionally, <command>tarantool</command>, the
    command line client, may distinguish between requests types
    and direct them to the appropriate port.
    The server response to an administrative command, even though
    it is always in plain text, can be quite complex.
    It is encoded using YAML markup to simplify automated parsing.
  </para>
  <para>To learn which functions are considered to be administrative,
    type <emphasis role="lua">help()</emphasis> in the
    administrative console. A reference description also follows
    below:</para>

  <variablelist>

    <varlistentry>
      <term xml:id="box.snapshot" xreflabel="box.snapshot()">
        <emphasis role="lua">box.snapshot()</emphasis>
      </term>
      <listitem><para>
        Take a snapshot of all data and store it in
        <filename><olink
        targetptr="snap_dir"/>/&lt;latest-lsn&gt;.snap</filename>.
        To take a snapshot, Tarantool first enters the delayed
        garbage collection mode for all data. In this mode,
        tuples which were allocated before the snapshot has
        started are not freed until the snapshot has finished.
        To preserve consistency of the primary key, used to
        iterate over tuples, a copy-on-write technique is employed.
        If the master process changes part of a primary key, 
        the corresponding process page is split, and the snapshot
        process obtains an old copy of the page. Since a
        snapshot is written sequentially, one can expect a very
        high write performance (averaging to 80MB/second on modern
        disks), which means an average database instance gets
        saved in a matter of minutes.  Note, that as long as there
        are any changes to the parent index memory through concurrent
        updates, there are going to be page splits, and therefore
        one needs to have some extra free memory to run this
        command. 10% of <olink targetptr="slab_alloc_arena"/>
        is, on average, sufficient. This statement waits until a
        snapshot is taken and returns operation result. For
        example:
<programlisting>tarantool> <userinput>box.info.version</userinput>
---
- 1.6.0-805-g4a7e71d
...
tarantool> <userinput>box.snapshot()</userinput>
---
ok
...
tarantool> <userinput>box.snapshot()</userinput>
---
fail: can't save snapshot, errno 17 (File exists)
...
</programlisting>
      </para>
      <para>
        Taking a snapshot does not cause the server to start a new
        write-ahead log. Once a snapshot is taken, old WALs can be
        deleted as long as all replicas are up to date. But the
        WAL which was current at the time <emphasis
        role="lua">box.snapshot()</emphasis> started must be
        kept for recovery, since it still contains log records
        written after the start of <emphasis role="lua">
        box.snapshot()</emphasis>.
      </para>
      <para>
        An alternative way to save a snapshot is to send the server
        SIGUSR1 UNIX signal. While this approach could be handy, it
        is not recommended for use in automation: a signal provides no
        way to find out whether the snapshot was taken successfully
        or not.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term xml:id="box.info" xreflabel="box.info()">
        <emphasis role="lua">box.info()</emphasis>
      </term>
      <listitem><para>
<programlisting>
<prompt>tarantool&gt;</prompt> <userinput>box.info()</userinput>
- version: 1.6.0-805-g4a7e71d
  status: primary
  pid: 12315
  lsn: 15481913304
  snapshot_pid: 0
  recovery_last_update: 1306964594
  recovery_lag: 0
  uptime: 441524
  build:
    flags: ' -fno-omit-frame-pointer -fno-stack-protector -fexceptions
      -funwind-tables -msse2 -std=gnu99 -Wall -Wextra -Wno-sign-compare
      -Wno-strict-aliasing -fopenmp -pthread'
    target: Linux-x86_64-Debug
    compiler: /usr/bin/cc /usr/bin/c++
    options: cmake . -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_STATIC=OFF
      -DENABLE_TRACE=ON -DENABLE_BACKTRACE=ON -DENABLE_CLIENT=true
  logger_pid: 12316
  config: /usr/local/etc/tarantool.cfg
</programlisting>
      </para>
      <para>
        <emphasis role="strong">recovery_lag</emphasis> holds the
        difference (in seconds) between the current time on the
        machine (wall clock time) and the time stamp of the last
        applied record.  In replication setup, this difference can
        indicate the delay taking place before a change is
        applied to a replica.
      </para>
      <para>
        <emphasis role="strong">recovery_last_update</emphasis> is
        the wall clock time of the last change recorded in the
        write-ahead log. To convert it to human-readable time,
        you can use <command>date -d@<replaceable>1306964594.980</replaceable></command>.
      </para>
      <para>
        <emphasis role="strong">status</emphasis> is
        either "primary" or "replica/&lt;hostname&gt;".
      </para>

      </listitem>
    </varlistentry>

    <varlistentry>
      <term xml:id="box.stat" xreflabel="box.stat">
        <emphasis role="lua">box.stat()</emphasis>
      </term>
      <listitem><para>
      Show the average number of requests per second, and the
      total number of requests since startup, broken down by
      request type.
<programlisting>
tarantool&gt; <userinput>box.stat()</userinput>
---
- DELETE:
    total: 48902544
    rps: 147
  SELECT:
    total: 388322317
    rps: 1246
  REPLACE:
    total: 0
    rps: 0
  INSERT:
    total: 48207694
    rps: 139
  AUTH:
    total: 0
    rps: 0
  CALL:
    total: 0
    rps: 0
  UPDATE:
    total: 743350520
    rps: 1874
...
</programlisting>
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term xml:id="box.slab.info" xreflabel="box.slab.info()">
        <emphasis role="lua">box.slab()</emphasis>
      </term>
      <listitem>
        <para>
          Show the statistics of the slab allocator. The slab
          allocator is the main allocator used to store tuples.
          This can be used to monitor the total memory use and
          memory fragmentation. For example:
        </para>
<programlisting>
<prompt>tarantool&gt;</prompt> <userinput>box.slab.info()</userinput>
---
- slabs:
    64:
      items: 16
      bytes_used: 1024
      item_size: 64
      slabs: 1
      bytes_free: 4193200
    ...
    136:
      items: 1
      bytes_used: 136
      item_size: 136
      slabs: 1
      bytes_free: 4194088
    ...
  arena_size: 8388448
  arena_used: 1160
</programlisting>
        <para>
          The display of slabs is broken down by the slab size --
          64-byte, 136-byte, and so on. The example omits the slabs
          which are empty. The example display is saying that:
          there are 16 items stored
          in the 64-byte slab (and 16*64=1024 so
          bytes_used = 1024); there is 1 item
          stored in the 136-byte slab (and
          136*1=136 so bytes_used = 136); the
          arena_used value is the total of all the bytes_used
          values (1024+136 = 1160); the
          arena_size value is the arena_used value
          plus the total of all the bytes_free values
          (1160+4193200+4194088 = 8388448). The
          arena_size and arena_used values are the amount of  
          the % of <olink targetptr="slab_alloc_arena"/> that is
          already distributed to the slab allocator.
        </para>
        <para>
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term xml:id="coredump" xreflabel="coredump()">
        <emphasis role="lua">coredump()</emphasis>
      </term>
      <listitem><para>
        Fork and dump a core. Since Tarantool stores all tuples
        in memory, it can take some time. Mainly useful for
        debugging.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term xml:id="fiber.info" xreflabel="fiber.info">
        <emphasis role="lua">require('fiber').info()</emphasis>
      </term>
      <listitem><para>
        Show all running fibers, with their stack.
        Mainly useful for debugging.
      </para></listitem>
    </varlistentry>

  </variablelist>

</section>

<xi:include href="stored-procedures.xml" />
<xi:include href="triggers.xml" />

</chapter>

<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
