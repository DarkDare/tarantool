<!DOCTYPE section [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<section xmlns="http://docbook.org/ns/docbook" version="5.0"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xml:id="stored-procedures">
    <title>Writing stored procedures in Lua</title>
<blockquote>
    <para>
        <link xlink:href="http://www.lua.org">Lua</link>
        is a light-weight, multi-paradigm, embeddable language.
        Stored procedures in Lua can be used to implement
        data manipulation patterns or data structures. A
        server-side routine written in Lua can select and modify
        data, access configuration and perform administrative
        tasks. It is possible to dynamically define, invoke,
        alter and drop Lua functions. Lua functions can run
        in the background and perform administrative tasks,
        such as data expiration or re-sharding.

    </para>
    <para>
        Tarantool uses the <link
        xlink:href="http://www.luajit.org">LuaJIT</link>
        just-in-time Lua compiler and virtual machine.
        Apart from increased performance, this provides such
        features as <link
        xlink:href="http://bitop.luajit.org/">bitwise
        operations</link> and <link xlink:href="#tonumber64">64-bit integer arithmetic.</link>
    </para>
</blockquote>
    <para>
      Procedures can be defined and invoked interactively, for example::
      <programlisting><computeroutput>tarantool> <userinput>function f1() return 'hello' end</userinput>
---
...
tarantool> <userinput>f1()</userinput>
---
- hello
...
</computeroutput>
</programlisting>
      In the above example, the requests are being sent, via either the
      <olink targetptr="primary_port">primary port</olink> or the <olink targetptr="admin_port">administrative port</olink>,
      using the text or binary protocol, for evaluation as a chunk of Lua code.
    </para>
    <para>
      Thus, the request "<code>function f1() return 'hello' end</code>"
      causes definition of the Lua function which will be identified as f1().
      Then the request "<code>f1()</code>" causes execution of
      the function. The function returns a string 'hello', which gets displayed.
    </para>
    <para>
      It's possible to execute any chunk of Lua code, not just invoke functions ...
    <programlisting><computeroutput>tarantool> <userinput>1 + 2</userinput>
---
 - 3
...
tarantool> <userinput>'hello' .. ' world' -- '..' means 'concatenate'</userinput>
---
 - hello world
...
</computeroutput></programlisting>
    </para>
    <para>
      Lua functions could also be called at the time of initialization
      using a dedicated <filename xml:id="init.lua" xreflabel="init.lua">init.lua</filename> script,
      located in 
      <olink targetptr="script_dir"><filename>script_dir</filename></olink>.
    An example and discussion of such a script will appear later in section
    <link linkend="sp-expirationd">expirationd</link>.
    </para>
    <para>
      The initialization script can select and modify data. However,
      if the server is a running replica, data change requests from
      the start script fail just the same way they would fail if they
      were sent from a remote client.
    </para>
    <para>
     Another common task to perform in the initialization script
     is to start background fibers for data expiration, re-sharding,
     or communication with networked peers.
    </para>
    <para>
      Finally, the script can be used to define Lua <olink
      targetptr="triggers">triggers</olink> invoked on various events
      within the system.
    </para>
    <para>
      There is a single global instance of the Lua interpreter, which is
      shared across all connections. Any request from a client
      is sent
      directly to this interpreter. Any changes of the interpreter
      state, including global variable values, have immediate
      effect on all client connections.
    </para>
    <para>
      However, each connection uses its own Lua
      <emphasis>coroutine</emphasis> &mdash; a mechanism akin to a
      Tarantool <emphasis>fiber</emphasis>. A coroutine has its
      own execution stack and its own set of local variables and
      definitions, as described in the 
      <link xlink:href="http://www.lua.org/pil/6.1.html">
      <emphasis>closure</emphasis> section</link> of the Lua manual. 
    </para>
    <para>
      The interpreter environment is not restricted when
      <olink targetptr="init.lua"/> is loaded. But before the
      server starts accepting requests, it disables access to
      some of the standard Lua APIs for file I/O, process control,
      and module management. This prevents trivial security attacks.
    </para>
    <para>
      The
      CALL request packet contains the command code for CALL (22), the name
      of a procedure to be called, and a tuple for procedure
      arguments. Currently, Tarantool tuples are type-agnostic,
      thus each field of the tuple is passed into the function
      as an argument of type <quote>string</quote>. For example:
<programlisting><computeroutput>kostja@atlas:~<prompt>$</prompt> <userinput>cat arg.lua</userinput>
function f1(a)
    local s = a
    if type(a) == 'string' then
        s = ''
        for i = 1, #a, 1 do
            s = s..string.format('0x%x ', string.byte(a, i))
        end
    end
    return type(a), s
end
kostja@atlas:~<prompt>$</prompt> <userinput>tarantool</userinput>
tarantool> <userinput>dofile('arg.lua')</userinput>
---
...
tarantool> <userinput>f1('1234')</userinput>
---
 - string
 - 0x31 0x32 0x33 0x34
...
tarantool> <userinput>f1(1234)</userinput>
---
 - number
 - 1234
...</computeroutput></programlisting>
      In the above example, the function finds out the type of the
      argument (Lua 'string' or 'number') at runtime, gets the byte codes
      if it's a string, and returns the type plus the string or number.
    </para>
    <para>
      In addition to conventional method invocation,
      Lua provides object-oriented syntax. Typically this involves
      the format <computeroutput><replaceable>object-specifier</replaceable>:<replaceable>function-name ...</replaceable></computeroutput>,
      where object-specifier is acquired as the result of another function invocation,
      or is the full <replaceable>library-name.package-name.object-name</replaceable>,
      or is the full <replaceable>library-name.package-name['object-name']</replaceable>,
      or is the full <replaceable>library-name.package-name[object-numeric-id]</replaceable>.
      The following example shows all four forms of object-specifier:
<programlisting>
tarantool> <userinput>s = box.schema.create_space('name_of_space', {id = 33})</userinput>
---
...
tarantool> <userinput>i = s:create_index('name_of_index', {type = 'tree', parts = {1, 'STR'}})</userinput>
---
...
tarantool> <userinput>s:insert{'a', 'b', 'c'}</userinput>
---
- ['a', 'b', 'c']
...
tarantool> <userinput>box.space.name_of_space:insert{'c', 'd', 'e'}</userinput>
---
- ['c', 'd', 'e']
...
tarantool> <userinput>box.space['name_of_space']:insert{'x', 'y', 'z'}</userinput>
---
- ['x', 'y', 'z']
...
</programlisting>
    </para>
    <para>
      When a function in Lua terminates with an error, the error
      is sent to the client as <olink targetptr="ER_PROC_LUA" />
      return code, along with the original error message.
      Similarly, an error which has occurred inside Tarantool (observed on the
      client as an error code), when it happens during execution of a
      Lua procedure, produces a genuine Lua error:
<programlisting><computeroutput>tarantool> <userinput>function f()error('!') end</userinput>
---
...
tarantool> <userinput>f()</userinput>
- error: '[string "function f()error(''!'') end"]:1: !'
tarantool> <userinput>s:insert{5}</userinput>
---
- error: 'Tuple field 1 type does not match one required by operation:
  expected STR'
...
tarantool> <userinput>function insert_without_colon(tuple) s:insert(tuple) end</userinput>
---
...
tarantool> <userinput>pcall(insert_without_colon,{0, 'b', 'c'})</userinput>
---
- false
- 'Tuple field 1 type does not match one required by operation: expected STR'
tarantool> <userinput>box.space[33]:drop()</userinput>
---
...
</computeroutput></programlisting>
    </para>

<variablelist>
<title>Lua functions <code>tonumber64</code> and <code>dostring</code></title>
    <varlistentry>
        <term xml:id="tonumber64" xreflabel="tonumber64"> <emphasis role="lua">tonumber64(<replaceable>value</replaceable>)</emphasis></term>
        <listitem>
            <para>
              Convert a string or a Lua number to a
              64-bit integer. The result can be used in arithmetic,
              and the arithmetic will be 64-bit integer arithmetic
              rather than floating-point arithmetic. (Operations on
              an unconverted Lua number use floating-point arithmetic.)
              The tonumber64() function is added by Tarantool; the name is global.
              <bridgehead renderas="sect4">Example</bridgehead>
<programlisting>
tarantool> <userinput>type(123456789012345), type(tonumber64(123456789012345))</userinput>
---
- number
- cdata
...
tarantool> <userinput>i = tonumber64('1000000000')</userinput>
---
...
tarantool> <userinput>type(i), i / 2, i - 2, i * 2, i + 2, i % 2, i ^ 2</userinput>
---
 - cdata
 - 500000000
 - 999999998
 - 2000000000
 - 1000000002
 - 0
 - 1000000000000000000
...
</programlisting>
            </para>
        </listitem>
    </varlistentry>
    
    <varlistentry>
        <term>
            <emphasis role="lua">dostring(<replaceable>lua-chunk-string [, lua-chunk-string-argument ...]</replaceable>)</emphasis>
        </term>
        <listitem>
            <para>
              Parse and execute an arbitrary chunk of Lua code.
              This function is mainly useful to define and run
              Lua code without having to
              introduce changes to the global Lua environment.
            </para>
            <para>
              Parameters: <code>lua-chunk-string</code> = string containing Lua code,
              <code>lua-chunk-string-argument(s)</code> = zero or more scalar values
               which will be appended to, or substitute for, items in the Lua chunk.
             </para>
             <para>
               Returns: whatever is returned by the Lua code chunk.
            </para>
            <para>
               Possible errors: If there is a compilation error,
               it is raised as a Lua error.
            </para>
            <para>
            <bridgehead renderas="sect4">Example</bridgehead>
<programlisting>
tarantool&gt; <userinput>dostring('abc')</userinput>
---
error: '[string "abc"]:1: ''='' expected near ''&lt;eof&gt;'''
...
tarantool&gt; <userinput>dostring('return 1')</userinput>
---
- 1
...
tarantool&gt; <userinput>dostring('return ...', 'hello', 'world')</userinput>
---
- hello
- world
...
tarantool&gt; <userinput>session = require('session'); session.delimiter('!') --<link linkend="utility-tarantool-delim">this</link> means ignore line feeds until next '!'</userinput>
tarantool&gt; <userinput>-- Use <link xlink:href="http://www.lua.org/pil/2.4.html">double square brackets</link> to enclose multi-line literal here!</userinput>
tarantool&gt; <userinput>dostring([[local f = function(key)</userinput>
        -&gt; <userinput>              t = box.space.tester:select(key);</userinput>
        -&gt; <userinput>              if t ~= nil then return t[1] else return nil end</userinput>
        -&gt; <userinput>              end</userinput>
        -&gt; <userinput>              return f(...)]], 1)!</userinput>
---
- null
...
tarantool&gt; <userinput>session.delimiter('')!</userinput>
</programlisting>
            </para>
        </listitem>
    </varlistentry>
    
</variablelist>

<section xml:id="sp-expirationd">
 <title>expirationd -- the daemon that shifts expired tuples to a long-term archive</title>

<para>
For a commercial-grade example of a Lua rock that works with Tarantool,
let us look at expirationd, which Tarantool supplies on
<link xlink:href="https://github.com/tarantool/expirationd/blob/master/expirationd.lua">GitHub</link>
with an Artistic license. The expirationd.lua program is
lengthy (about 500 lines), so here we will only highlight
the matters that will be enhanced by studying the full source later.
<programlisting>
            task.worker_fiber = fiber.create(worker_loop)
            task.worker_fiber:resume(task)
            log.info("expiration: task %q restarted", task.name)
            ...
            fiber.sleep(expirationd.constants.check_interval)
            ...
</programlisting>
Whenever one hears "daemon" in Tarantool, one should suspect it's
being done with <olink targetptr="sp-box-fiber">fibers</olink>. The program is making a fiber
and turning control over to it so it runs occasionally, goes to
sleep, then comes back for more.
<programlisting>
    for _, tuple in scan_space.index[0]:pairs(nil, {iterator = box.index.ALL}) do
    ...
            if task.is_tuple_expired(task.args, tuple) then
            task.expired_tuples_count = task.expired_tuples_count + 1
            task.process_expired_tuple(task.space_id, task.args, tuple)
    ...
</programlisting>
The "for" instruction can be translated as "iterate through the index of
the space that is being scanned", and within it, if the tuple is "expired"
(that is, if the tuple has a timestamp field which is less than the current
time), process the tuple as an expired tuple.
<programlisting>
-- put expired tuple in archive
local function put_tuple_to_archive(space_id, args, tuple)
    -- delete expired tuple
    box.space[space_id]:delete{tuple[0]}
    local email = get_field(tuple, 1)
    if args.archive_space_id ~= nil and email ~= nil then
        box.space[args.archive_space_id]:replace{email, os.time()}
    end
end
</programlisting>
Ultimately the tuple-expiry process leads to put_tuple_to_archive()
which does a "delete" of a tuple from its original space, and an
"insert" of the same tuple into another space. Tarantool's "replace"
function is the same as an "insert" function without an error message
if a tuple with the same content already exists in the target space.
<programlisting>
function expirationd.do_test(space_id, archive_space_id)
...
</programlisting>
At this point, if the above explanation is worthwhile, it's clear that
expirationd.lua starts a background routine (fiber) which iterates
through all the tuples in a space, sleeps cooperatively so that other
fibers can operate at the same time, and -- whenever it finds a tuple
that has expired -- deletes it from this space and puts it in another
space. Now the "do_test()" function can be used to create some sample
spaces, let the daemon run for a while, and print results.
</para>
<para>
For those who like to see things run, here are the exact steps to
get expirationd through the test.
</para>
<para>
1. Get expirationd.lua.
   There are standard ways -- it is after all part of a standard rock --
   but for this purpose just copy the contents of
   <link xlink:href="https://github.com/tarantool/expirationd/blob/master/expirationd.lua">https://github.com/tarantool/expirationd/blob/master/expirationd.lua</link>
   to a default directory.
</para>
<para>
2. Start the Tarantool server as described <olink targetptr="getting-started-start-stop">before</olink>.
</para>
<para>
3. Execute these requests:
<programlisting>
     box.cfg{}
     a = box.schema.create_space('origin')
     a:create_index('first', {type = 'tree', parts = {1, 'NUM'}})
     b = box.schema.create_space('archive')
     b:create_index('first', {type = 'tree', parts = {1, 'STR'}})
     expd = require('expirationd')
     expd._debug = true
     expd.do_test('origin', 'archive')
     os.exit()
</programlisting>
The database-specific requests (cfg, create_space, create_index)
should already be familiar. The key for getting the rock rolling is
<code>expd = require('expirationd')</code>.
The "require" function is what reads in the program; it will appear
in many later examples in this manual, when it's necessary to get a
package that's not part of the Tarantool kernel. After the Lua
variable expd has been assigned the value of the expirationd package,
it's possible to invoke the package's <code>do_test()</code> function.
</para>
<para>
After a while, when the task has had time to do its iterations through
the spaces, do_test() will print out a report showing the tuples that
were originally in the original space, the tuples that have now been
moved to the archive space, and some statistics. Of course, expirationd
can be customized to do different things by passing different parameters,
which will be evident after looking in more detail at the source code.  
</para> 

</section>

<section xml:id="sp-pickle">
    <title>Package <code>pickle</code></title>
<variablelist xml:id="x-pickle" xreflabel="x-pickle">
    <varlistentry>
        <term><emphasis role="lua">pickle.pack(<replaceable>format, argument [, argument ...]</replaceable>)</emphasis></term>
        <listitem><para>
            To use Tarantool binary protocol primitives from Lua,
            it's necessary to convert Lua variables to binary
            format. The pickle.pack() helper function is prototyped after Perl
            <link xlink:href="http://perldoc.perl.org/functions/pack.html">
             'pack'</link>.
            </para>
            <para>
               Parameters: <code>format</code> = string containing format specifiers, <code>argument(s)</code> = scalar values to be formatted.
            </para>
            <para>
            <bridgehead renderas="sect4">Format specifiers</bridgehead>
            <simplelist>
                <member><code>b</code> or <code>B</code> &mdash; converts Lua
                variable to a 1-byte
                integer, and stores the integer in the resulting
                string,
                </member>
                <member><code>s</code> or <code>S</code> &mdash; converts Lua
                variable to a 2-byte
                integer, and stores the integer in the resulting
                string, low byte first,
                </member>
                <member><code>i</code> or <code>I</code> &mdash; converts Lua
                variable to a 4-byte
                integer, and stores the integer in the resulting
                string, low byte first,
                </member>
                <member><code>l</code> or <code>L</code> &mdash; converts Lua
                variable to an 8-byte
                integer, and stores the integer in the resulting
                string, low byte first,
                </member>
                <member><code>n</code> or <code>N</code> &mdash; converts Lua
                variable to a 4-byte
                integer, and stores the integer in the resulting
                string, big endian,
                </member>
                <member><code>q</code> or <code>Q</code> &mdash; converts Lua
                variable to an 8-byte
                integer, and stores the integer in the resulting
                string, big endian,
                </member>
                <member><code>f</code> &mdash; converts Lua
                variable to a 4-byte
                float, and stores the float in the resulting
                string,
                </member>
                <member><code>d</code> &mdash; converts Lua
                variable to a 8-byte
                double, and stores the double in the resulting
                string,
                </member>
                <member><code>d</code> &mdash; converts Lua
                variable to a sequence of bytes,
                and stores the sequence in the resulting
                string,
                </member>
            </simplelist>
            </para>
            <para>
              Returns: a binary string containing all arguments, packed
              according to the format specifiers.
            </para>
            <para>
              Possible Errors: Unknown format specifier.
            </para>
            <para>
        <bridgehead renderas="sect4">Example</bridgehead>
<programlisting>
tarantool> <userinput>pickle = require('pickle')</userinput>
---
...
tarantool> <userinput>box.space.tester:insert{0, 'hello world'}</userinput>
---
- [0, 'hello world']
...
tarantool> <userinput>box.space.tester:update({0}, {{'=', 2, 'bye world'}})</userinput>
---
- [0, 'bye world']
...
tarantool> <userinput>box.space.tester:update({0}, {{'=', 2, pickle.pack('iiA', 0, 3, 'hello')}})</userinput>
---
- [0, "\0\0\0\0\x03\0\0\0hello"]
...
tarantool> <userinput>box.space.tester:update({0}, {{'=', 2, 4}})</userinput>
---
- [0, 4]
...
tarantool> <userinput>box.space.tester:update({0}, {{'+', 2, 4}})</userinput>
---
- [0, 8]
...
tarantool> <userinput>box.space.tester:update({0}, {{'^', 2, 4}})</userinput>
---
- [0, 12]
...
</programlisting>
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term><emphasis role="lua">pickle.unpack(<replaceable>format, binary-string</replaceable>)</emphasis></term>
        <listitem>
            <para>
              Counterpart to <code>pickle.pack()</code>.
            </para>
            <para>
              Parameters: <code>format</code>, <code>binary-string</code>.
            </para>
            <para>
             Returns: (type = scalar) A list of strings or numbers.
            </para>
            <para>
            <bridgehead renderas="sect4">Example</bridgehead>
<programlisting>
<prompt>tarantool</prompt> <userinput>pickle = require('pickle')</userinput>
---
...
<prompt>tarantool></prompt> <userinput>session = require('session'); session.delimiter('!') -- this means following commands must end with '!'</userinput>
<prompt>tarantool></prompt> <userinput>tuple = box.space.tester:replace{0}!</userinput>
---
...
<prompt>tarantool></prompt> <userinput>string.len(tuple[1])!</userinput>
---
- 1
...
<prompt>tarantool></prompt> <userinput>pickle.unpack('b', tuple[1])!</userinput>
---
- 48
...
<prompt>tarantool></prompt> <userinput>pickle.unpack('bsi', pickle.pack('bsi', 255, 65535, 4294967295))!</userinput>
---
- 255
- 65535
- 4294967295
...
<prompt>tarantool></prompt> <userinput>pickle.unpack('ls', pickle.pack('ls', tonumber64('18446744073709551615'), 65535))!</userinput>
---
- 18446744073709551615
- 65535
...
<prompt>tarantool></prompt> <userinput>num, str, num64 = pickle.unpack('sAl', pickle.pack('sAl', 666, 'string',</userinput>
<prompt>        -></prompt> <userinput>                  tonumber64('666666666666666')))!</userinput>
---
...
<prompt>tarantool></prompt> <userinput>num, str, num64!</userinput>
---
- 666
- string
- 666666666666666
...
<prompt>tarantool></prompt> <userinput>session.delimiter('') -- back to normal: commands end with line feed!</userinput>
</programlisting>
            </para>
        </listitem>
    </varlistentry>
</variablelist>
</section>

<section xml:id="sp-digest">
    <title>Package <code>digest</code></title>
    <para>
    A "digest" is a value which is returned by a

    <link xlink:href="https://en.wikipedia.org/wiki/Cryptographic_hash_function">Cryptographic hash function</link>
    applied against a string.
    Tarantool supports five types of cryptographic hash functions
    (<link xlink:href="https://en.wikipedia.org/wiki/Md4">MD4</link>,
    <link xlink:href="https://en.wikipedia.org/wiki/Md5">MD5</link>,
    <link xlink:href="https://en.wikipedia.org/wiki/Sha-0">SHA-0</link>,
    
    <link xlink:href="https://en.wikipedia.org/wiki/Sha-1">SHA-1</link>,
    <link xlink:href="https://en.wikipedia.org/wiki/Sha-2">SHA-2</link>)

    as well as a checksum function
    (<link xlink:href="https://en.wikipedia.org/wiki/Cyclic_redundancy_check">CRC32</link>).
    The functions in <code>digest</code> are:<programlisting><code>    digest.crc32(<replaceable>string</replaceable>)                  Returns 32-bit checksum made with CRC32.
    digest.crc32_update(<replaceable>number</replaceable>,<replaceable>string</replaceable>)    Returns update of a checksum calculated with crc32.
    digest.sha0(<replaceable>string</replaceable>)                   Returns 160-bit digest made with SHA-0. Not recommended.
    digest.sha0_hex(<replaceable>string</replaceable>)               Returns hexadecimal of a digest calculated with sha0.
    digest.sha1(<replaceable>string</replaceable>)                   Returns 160-bit digest made with SHA-1.
    digest.sha1_hex(<replaceable>string</replaceable>)               Returns hexadecimal of a digest calculated with sha1.
    digest.sha224(<replaceable>string</replaceable>)                 Returns 224-bit digest made with SHA-2.
    digest.sha224_hex(<replaceable>string</replaceable>)             Returns hexadecimal of a digest calculated with sha224.
    digest.sha256(<replaceable>string</replaceable>)                 Returns 256-bit digest made with SHA-2.
    digest.sha256_hex(<replaceable>string</replaceable>)             Returns hexadecimal of a digest calculated with sha256.
    digest.sha384(<replaceable>string</replaceable>)                 Returns 384-bit digest made with SHA-2.
    digest.sha384_hex(<replaceable>string</replaceable>)             Returns hexadecimal of a digest calculated with sha384.
-   digest.sha512(<replaceable>string</replaceable>)                 Returns 512-bit digest made with SHA-2.
    digest.sha512_hex(<replaceable>string</replaceable>)             Returns hexadecimal of a digest calculated with sha512.
    digest.md4(<replaceable>string</replaceable>)                    Returns 128-bit digest made with MD4.
    digest.md4_hex(<replaceable>string</replaceable>)                Returns hexadecimal of a digest calculated with md4.
    digest.md5(<replaceable>string</replaceable>)                    Returns 256-bit digest made with MD5.
    digest.md5_hex(<replaceable>string</replaceable>)                Returns hexadecimal of a digest calculated with md5.</code></programlisting>
   </para>
<bridgehead renderas="sect4">Example</bridgehead>
    <para>
    In the following example, the user creates two functions, password_insert() 
    which inserts a SHA-1 digest of the word "^S^e^c^ret Wordpass" into a tuple set,
    and password_check() which requires input of a password.<programlisting>
<prompt>localhost&gt;</prompt> <userinput>digest = require('digest')</userinput>
<prompt>localhost&gt;</prompt> <userinput>session = require('session'); session.delimiter('!') --this means ignore line feeds until next '!'</userinput>
<prompt>localhost&gt;</prompt> <userinput>function password_insert()</userinput>
        <prompt>-&gt;</prompt> <userinput>  box.space.tester:insert{12345,digest.sha1('^S^e^c^ret Wordpass')}</userinput>
        <prompt>-&gt;</prompt> <userinput>  return 'OK'</userinput>
        <prompt>-&gt;</prompt> <userinput>  end!</userinput>
---
...
<prompt>localhost&gt;</prompt> <userinput>function password_check(password)</userinput>
        <prompt>-&gt;</prompt>  <userinput> local t</userinput>
        <prompt>-&gt;</prompt>  <userinput> t=box.space.tester:select{12345}</userinput>
        <prompt>-&gt;</prompt>  <userinput> if (digest.sha1(password)==t[2]) then</userinput>
        <prompt>-&gt;</prompt>  <userinput>   print('Password is valid')</userinput>
        <prompt>-&gt;</prompt>  <userinput>   else</userinput>
        <prompt>-&gt;</prompt>  <userinput>     print('Password is not valid')</userinput>
        <prompt>-&gt;</prompt>  <userinput>   end</userinput>
        <prompt>-&gt;</prompt> <userinput>end!</userinput>
---
...
<prompt>localhost&gt;</prompt> <userinput>password_insert()!</userinput>
Call OK, 1 rows affected
['OK']
<prompt>localhost></prompt> <userinput>session.delimiter('') --  back to normal: commands end with line feed!</userinput>
</programlisting></para>
<para>
  If a later user calls
  the password_check() function and enters the wrong password, the result is an
  error.<programlisting><prompt>localhost&gt;</prompt> <userinput>password_check ('Secret Password')</userinput>
---
Password is not valid
...</programlisting></para>
</section>

<section xml:id="sp-box-uuid">
    <title>Package <code>uuid</code></title>
<variablelist xml:id="x-uuid" xreflabel="x-uuid">
    <varlistentry>
        <term>
            <emphasis role="lua">uuid.bin()</emphasis>
        </term>
        <listitem>
            <para>
                Returns: a 128-bit (16-byte) unique id in binary form.
            </para>
            <para>
                Possible errors: The server tries to load the <emphasis>libuuid</emphasis> library
                when it starts. If the library is not available, which can happen if it was not
                found when the server was built from source, then uuid.bin() returns an error.
            <bridgehead renderas="sect4">Example</bridgehead>
<programlisting>tarantool&gt; <userinput>uuid=require('uuid')</userinput>
---
...
tarantool&gt; <userinput>uuid.bin() == uuid.bin() -- Comment: == means "are they equal?"</userinput>
---
 - false
...
</programlisting>
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>
            <emphasis role="lua">uuid.hex()</emphasis>
        </term>
        <listitem>
            <para>
                Returns: a 32-byte hexadecimal conversion of a 128-bit
                unique id, as a string.
            </para>
            <bridgehead renderas="sect4">Example</bridgehead>
<programlisting>
tarantool&gt; <userinput>uuid=require('uuid')</userinput>
---
...
tarantool&gt; <userinput>uuid.hex()</userinput>
---
 - b8eadcb078b54bed8fa8425d129b10e8
...
</programlisting>
        </listitem>
    </varlistentry>
</variablelist>
</section>

<section xml:id="sp-box-cjson">
    <title>Package <code>json</code></title>

<variablelist xml:id="box.cjson" xreflabel="box.cjson">
    <para>
        The <code>json</code> package provides JSON manipulation routines.
        It is based on the <link xlink:href="http://www.kyne.com.au/~mark/software/lua-cjson.php">
        Lua-CJSON package by Mark Pulford</link>.

        For a complete manual on Lua-CJSON please read <link xlink:href="http://www.kyne.com.au/~mark/software/lua-cjson-manual.html">the official documentation</link>.
    </para>
    <varlistentry>
        <term><emphasis role="lua">json.encode(<replaceable>scalar-value | Lua-table-value</replaceable>)</emphasis></term>
        <listitem>
            <para>
              Convert a Lua object to a JSON string.
            </para>
            <para>
              Parameters: either a scalar value or a Lua table value.
            </para>
            <para>
              Returns: (type = string) the original value reformatted as a JSON string.
            </para>
            <bridgehead renderas="sect4">Example</bridgehead>
<programlisting>
tarantool&gt; <userinput>json=require('json')</userinput>
---
...
tarantool&gt; <userinput>json.encode(123)</userinput>
---
- '123'
...
tarantool&gt; <userinput>json.encode({123})</userinput>
---
- '[123]'
...
tarantool&gt; <userinput>json.encode({123, 234, 345})</userinput>
---
- '[123,234,345]'
...
tarantool&gt; <userinput>json.encode({abc = 234, cde = 345})</userinput>
---
- '{"cde":345,"abc":234}'
...
tarantool&gt; <userinput>json.encode({hello = {'world'}})</userinput>
---
- '{"hello":["world"]}'
...
</programlisting>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term><emphasis role="lua">json.decode(<replaceable>string-value</replaceable>)</emphasis></term>
        <listitem>
            <para>
              Convert a JSON string to a Lua object.
            </para>
            <para>
              Parameters: <code>string-value</code> = a string formatted as JSON.
            </para>
            <para>
              Returns: (type = Lua table) the original contents formatted as a Lua table.
            </para>
            <bridgehead renderas="sect4">Example</bridgehead>
<programlisting>tarantool&gt; <userinput>json=require('json')</userinput>
---
...
 tarantool&gt; <userinput>json.decode('123')</userinput>
---
- 123
...
tarantool&gt; <userinput>json.decode('[123, "hello"]')[2]</userinput>
---
- hello
...
tarantool&gt; <userinput>json.decode('{"hello": "world"}').hello</userinput>
---
- world
...
</programlisting>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term><emphasis role="lua" xml:id="json-null" xreflabel="json-null">json.NULL</emphasis></term>
        <listitem>
            <para>
              Return a value comparable to Lua "nil" which may be useful as a placeholder in a tuple.
            </para>
            <para>
              Parameters: none.
            </para>
            <para>
              Returns: the comparable value.
            </para>
        </listitem>
    </varlistentry>
</variablelist>
</section>

<section xml:id="sp-yaml">
    <title>Package <code>yaml</code></title>
    <para>
     The <code>yaml</code> package takes strings in YAML format and decodes them,
     or takes a series of non-YAML values and encodes them.
    </para>
<variablelist xml:id="yaml">
    <varlistentry>
        <term><emphasis role="lua">yaml.encode(<replaceable>scalar-value | Lua-table-value</replaceable>)</emphasis></term>
        <listitem>
            <para>
              Convert a Lua object to a YAML string.
            </para>
            <para>
              Parameters: either a scalar value or a Lua table value.
            </para>
            <para>
              Returns: (type = string) the original value reformatted as a YAML string.
            </para>
       </listitem>
    </varlistentry>
    <varlistentry>
        <term><emphasis role="lua">yaml.decode(<replaceable>string-value</replaceable>)</emphasis></term>
        <listitem>
            <para>
              Convert a YAML string to a Lua object.
            </para>
            <para>
              Parameters: <code>string-value</code> = a string formatted as YAML.
            </para>
            <para>
              Returns: (type = Lua table) the original contents formatted as a Lua table.
            </para>
        </listitem>
    </varlistentry>
        <varlistentry>
        <term><emphasis role="lua" xml:id="yaml-null" xreflabel="yaml-null">yaml.NULL</emphasis></term>
        <listitem>
            <para>
              Return a value comparable to Lua "nil" which may be useful as a placeholder in a tuple.
            </para>
            <para>
              Parameters: none.
            </para>
            <para>
              Returns: the comparable value.
            </para>
        </listitem>
    </varlistentry>
</variablelist>
    <para>
    <bridgehead renderas="sect4">Example</bridgehead>
<programlisting>
tarantool> yaml = require('yaml')
---
...
tarantool> y =  yaml.encode({'a',1,'b',2})
---
...
tarantool> z = yaml.decode(y)
---
...
tarantool> z[1],z[2],z[3],z[4]
---
- a
- 1
- b
- 2
...
tarantool> if yaml.NULL == nil then print('hi') end
hi
---
...
</programlisting>
    </para>
</section>

<section xml:id="sp-msgpack">
    <title>Package <code>msgpack</code></title>
    <para>
     The <code>yaml</code> package takes strings in MsgPack format and decodes them,
     or takes a series of non-MsgPack values and encodes them.
    </para>
<variablelist xml:id="msgpack">
    <varlistentry>
        <term><emphasis role="lua">msgpack.encode(<replaceable>scalar-value | Lua-table-value</replaceable>)</emphasis></term>
        <listitem>
            <para>
              Convert a Lua object to a MsgPack string.
            </para>
            <para>
              Parameters: either a scalar value or a Lua table value.
            </para>
            <para>
              Returns: (type = string) the original value reformatted as a MsgPack string.
            </para>
       </listitem>
    </varlistentry>
    <varlistentry>
        <term><emphasis role="lua">msgpack.decode(<replaceable>string-value</replaceable>)</emphasis></term>
        <listitem>
            <para>
              Convert a MsgPack string to a Lua object.
            </para>
            <para>
              Parameters: <code>string-value</code> = a string formatted as MsgPack.
            </para>
            <para>
              Returns: (type = Lua table) the original contents formatted as a Lua table.
            </para>
        </listitem>
    </varlistentry>
        <varlistentry>
        <term><emphasis role="lua" xml:id="msgpack-null" xreflabel="msgpack-null">msgpack.NULL</emphasis></term>
        <listitem>
            <para>
              Return a value comparable to Lua "nil" which may be useful as a placeholder in a tuple.
            </para>
            <para>
              Parameters: none.
            </para>
            <para>
              Returns: the comparable value.
            </para>
        </listitem>
    </varlistentry>
</variablelist>
    <para>
    <bridgehead renderas="sect4">Example</bridgehead>
<programlisting>
tarantool> msgpack = require('msgpack')
---
...
tarantool> y =  msgpack.encode({'a',1,'b',2})
---
...
tarantool> z = msgpack.decode(y)
---
...
tarantool> z[1],z[2],z[3],z[4]
---
- a
- 1
- b
- 2
...
tarantool> box.space.tester:insert{20,msgpack.NULL,20}
---
- [20, null, 20]
...
</programlisting>
    </para>
</section>

<section xml:id="sp-box-fiber">
    <title>Package <code>fiber</code></title>
    <para>
      The <code>fiber</code> package allows for creating, running and managing <emphasis>fibers</emphasis>.
    </para>
    <para>
      A fiber is a set of instructions which are executed
      with cooperative multitasking. Fibers managed by the
      fiber package are associated with a user-supplied function
      called the <emphasis>fiber function</emphasis>.

      A fiber has three possible states: running, suspended or dead.
      When a fiber is created with <code>fiber.create()</code>, it is suspended.
      When a fiber is started with <code>fiber.resume()</code>, it is running.
      When a fiber yields control with <code>fiber.yield()</code>, it is suspended.
      When a fiber ends (because the fiber function ends), it is dead.
    </para>
    <para>
      A fiber can also be attached or detached.
      An attached fiber is a child of the creator,
      and is running only if the creator has called
      <code>fiber.resume()</code>. A detached fiber is a child of
      the Tarantool internal <quote>sched</quote> fiber, and gets
      scheduled only if there is a libev event associated
      with it.
      To detach, a running fiber should invoke <code>fiber.wrap()</code>.
      A detached fiber loses connection with its parent forever.
    </para>
    <para>
      All fibers are part of the fiber registry.
      This registry can be searched (<code>fiber.find()</code>)
      either by fiber id (fid), which is numeric, or by fiber name,
      which is a string. If there is more than one fiber with the given
      name, the first fiber that matches is returned.
    </para>
    <para>
      A runaway fiber can be stopped with <code>fiber.cancel()</code>.
      However, <code>fiber.cancel()</code> is advisory &mdash; it works
      only if the runaway fiber calls <code>fiber.testcancel()</code>
      once in a while. Most <code>box.*</code> hooks, such as <code>box.space...delete()</code>
      or <code>box.space...update()</code>, do call <code>fiber.testcancel()</code>.
      <code>box.space...select()</code> does not.
      In practice, a runaway fiber can only become unresponsive
      if it does many computations and does not check
      whether it's been canceled.
<!--
In addition to the advisory cancellation, configuration parameter
<code>lua_timeout</code> can be used to cancel runaway Lua
procedures.
-->
    </para>
    <para>
      The other potential problem comes from detached
      fibers which never get scheduled, because they are not subscribed
      to any events, or because no relevant events occur. Such morphing fibers
      can be killed with <code>fiber.cancel()</code> at any time,
      since <code>fiber.cancel()</code>
      sends an asynchronous wakeup event to the fiber,
      and <code>fiber.testcancel()</code> is checked whenever such an event occurs.
    </para>
    <para>
      Like all Lua objects, dead fibers are
      garbage collected. The garbage collector frees pool allocator
      memory owned by the fiber, resets all fiber data, and returns
      the fiber (now called a fiber carcass) to the fiber pool.
      The carcass can be reused when another fiber is created.
    </para>
<variablelist xml:id="fiber">
    <varlistentry>
        <term>
            <emphasis role="lua" xml:id="fiber.id">fiber.id(<replaceable>fiber</replaceable>) </emphasis>
        </term>
        <listitem>
            <para>
              Returns: (type = number) id of the fiber.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
            <emphasis role="lua" xml:id="fiber.self">fiber.self() </emphasis>
        </term>
        <listitem>
            <para>
              Returns: (type = userdata) <code>require('fiber')</code>
              object for the currently scheduled fiber.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
            <emphasis role="lua" xml:id="fiber.find">fiber.find(<replaceable>id</replaceable>) </emphasis>
        </term>
        <listitem>
            <para>
              Locate a fiber userdata object by id.
            </para>
            <para>
              Returns: (type = userdata) require('fiber') object for the specified fiber.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
            <emphasis role="lua" xml:id="fiber.create">fiber.create(<replaceable>function-name</replaceable>) </emphasis>
        </term>
        <listitem>
            <para>
              Create a fiber.
            </para>
            <para>
              Parameters: <code>function-name</code> = the function that the fiber is associated with.
            </para>
            <para>
              Returns: (type = userdata) the require('fiber') object of the new fiber.
            </para>
            <para>
              Possible errors: the function does not exist or if a recursion limit is hit.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
            <emphasis role="lua" xml:id="fiber.resume">fiber.resume(<replaceable>fiber, ...</replaceable>) </emphasis>
        </term>
        <listitem>
            <para>
              Resume a created
              or suspended fiber.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
         <emphasis role="lua" xml:id="fiber.yield" xreflabel="fiber.yield">fiber.yield(<replaceable>yield-arguments</replaceable>) </emphasis>
        </term>
        <listitem>
            <para>
              If the fiber is attached, yield control to the calling fiber if the fiber
              is attached; otherwise, yield to sched.
            </para>
            <para>
              Parameters: <code>yield-arguments</code>:  
              If the fiber is attached, arguments passed
              to fiber.yield are passed on to the calling fiber.
              If the fiber is detached, <code>fiber.yield()</code>
              arguments passed to fiber.yield are returned after temporarily
              yielding control back to the scheduler.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
            <emphasis role="lua" xml:id="fiber.detach">fiber.detach()</emphasis>
        </term>
        <listitem>
            <para>
              Detach the current fiber. This is a cancellation point. This is a yield point.
              It is usually more convenient to use <code>fiber.wrap()</code> to create
              a fiber which is already detached when it is created.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
            <emphasis role="lua" xml:id="fiber.wrap">fiber.wrap(<replaceable>function, function-arguments</replaceable>)</emphasis>
        </term>
        <listitem>
            <para>
              This is a quick way to create and start a detached
              fiber. The fiber is
              created, detached, and resumed immediately.
            </para>
            <para>
              Parameters: <code>function</code> = the function to be associated with the fiber,
              <code>function-arguments</code> = what will be passed to the function.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
            <emphasis role="lua" xml:id="fiber.sleep">fiber.sleep(<replaceable>time</replaceable>)</emphasis>
        </term>
        <listitem>
            <para>
              Yield to the sched fiber and sleep for the specified number of seconds.
              Only the current fiber can be made to sleep.
            </para>
            <para>
              Parameters: <code>time</code> = number of seconds to sleep.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
            <emphasis role="lua" xml:id="fiber.status">fiber.status(<replaceable>[fiber]</replaceable>)</emphasis>
        </term>
        <listitem>
            <para>
              Return the status of the specified fiber.
            </para>
            <para>
              Parameters: <code>fiber</code> = the fiber to be checked -- if this is not
              supplied, then the current fiber is to be checked.
            </para>
            <para>
              Returns: (type = string) the status of <code>fiber</code>.
              One of: <quote>dead</quote>,
              <quote>suspended</quote>, <quote>attached</quote>
              or <quote>running</quote>.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
            <emphasis role="lua" xml:id="fiber.cancel">fiber.cancel(<replaceable>fiber</replaceable>)</emphasis>
        </term>
        <listitem>
            <para>
              Cancel a <code>fiber</code>.
              Running and suspended fibers can be canceled.
            </para>
            <para>
              Parameters: <code>fiber</code> = the fiber to be canceled.
            </para>
            <para>
              Possible errors: the specified fiber does not permit cancel.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
            <emphasis role="lua" xml:id="fiber.testcancel">fiber.testcancel()</emphasis>
        </term>
        <listitem>
            <para>
              Check if the current fiber has been canceled and
              throw an exception if this is the case.
            </para>
        </listitem>
    </varlistentry>
    
    <varlistentry>
        <term>
            <emphasis role="lua">fiber.time()</emphasis>
        </term>
        <listitem>
            <para>
                Returns: current system time (in seconds since the epoch) as a Lua
                number.  The time is taken from the event loop
                clock, which makes this call very cheap,
                but still useful for constructing artificial
                tuple keys.
            <bridgehead renderas="sect4">Example</bridgehead>
<programlisting>tarantool&gt; <userinput>fiber = require('fiber')</userinput>
---
...
tarantool&gt; <userinput> fiber.time(), fiber.time()</userinput>
---
 - 1385758759.2591
 - 1385758759.2591
...
</programlisting>
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>
            <emphasis role="lua">fiber.time64()</emphasis>
        </term>
        <listitem>
            <para>
              Returns: current system time (in microseconds since the epoch) as a 64-bit
              integer. The time is taken from the event loop clock.
            <bridgehead renderas="sect4">Example</bridgehead>
<programlisting>arantool&gt; <userinput>fiber = require('fiber')</userinput>
---
...
tarantool&gt; <userinput>fiber.time(), fiber.time64()</userinput>
---
 - 1385758828.9825
 - 1385758828982485
...
</programlisting>
            </para>
        </listitem>
    </varlistentry>
    
</variablelist>

<para>
<bridgehead renderas="sect4">Example</bridgehead>
Make the function which will be associated with the fiber.
This function contains an infinite loop
("while 0 == 0" is always true).
Each iteration of the loop adds 1 to a global variable
named gvar, then goes to sleep for 2 seconds.
The sleep causes an implicit fiber.yield().<programlisting>
<prompt>tarantool&gt;</prompt><userinput> fiber = require('fiber')</userinput>
<prompt>tarantool&gt;</prompt><userinput> session = require('session'); session.delimiter('!')</userinput>
<prompt>tarantool&gt;</prompt><userinput> function function_x()</userinput>
<prompt>        -&gt;</prompt><userinput>   gvar = 0</userinput>
<prompt>        -&gt;</prompt><userinput>   while 0 == 0 do</userinput>
<prompt>        -&gt;</prompt><userinput>     gvar = gvar + 1</userinput>
<prompt>        -&gt;</prompt><userinput>     fiber.sleep(2)</userinput>
<prompt>        -&gt;</prompt><userinput>     end</userinput>
<prompt>        -&gt;</prompt><userinput>   end!</userinput>
---
...
<prompt>tarantool&gt;</prompt><userinput> session.delimiter('')!</userinput></programlisting>
Make a fiber, associate function_x with the fiber,
and start function_x. It will immediately "detach"
so it will be running independently of the caller.
<programlisting>
<prompt>tarantool&gt;</prompt><userinput> fiber_of_x = fiber.wrap(function_x)</userinput>
---
...</programlisting>

Get the id of the fiber (fid), to be used in later displays.<programlisting>
<prompt>tarantool&gt;</prompt><userinput> fid = fiber.wrap(function_x)</userinput>
---
...
</programlisting>
Pause for a while, while the detached function runs. Then ...
Display the fiber id, the fiber status, and gvar  (gvar will have
gone up a bit depending how long the pause lasted). The status is
suspended because the fiber spends almost all its time sleeping or yielding.<programlisting>
<prompt>tarantool&gt;</prompt><userinput> '#',fid,'. ',fiber.status(fiber_of_x),'. gvar=',gvar</userinput>
---
- '#'
- 'userdata: 0x4133d340'
- '. '
- suspended
- . gvar=
- 181
...
</programlisting>
Pause for a while, while the detached function runs. Then ...
Cancel the fiber. Then, once again ...
Display the fiber id, the fiber status, and gvar (gvar will have
gone up a bit more depending how long the pause lasted). This time
the status is dead because the cancel worked.<programlisting>
<prompt>tarantool&gt;</prompt><userinput> fiber.cancel(fiber_of_x)</userinput>
... fiber `lua' has been cancelled
... fiber `lua': exiting
---
...
<prompt>tarantool&gt;</prompt><userinput> '#',fid,'. ',fiber.status(fiber_of_x),'. gvar=',gvar</userinput>
---
- '#'
- 'userdata: 0x4133d340'
- '. '
- dead
- . gvar=
- 257
...</programlisting>
</para>

</section>

<section xml:id="sp-fiber-ipc">
    <title>Package <code>fiber-IPC</code> &mdash; inter-process communication</title>
    <para>
      The <code>fiber-IPC</code> package allows sending and receiving messages between
      different processes. The words "different processes" in this context mean
      different connections, different sessions, or different fibers.
    </para>
    <para>
      Call <code>fiber.channel()</code> to allocate space and get a channel object, which will be
      called <code>channel</code> for examples in this section.
      Call the other fiber-IPC routines, via <code>channel</code>, to send messages, receive messages, or check ipc status.
      Message exchange is synchronous.
      The channel is garbage collected when no one is using it, as with any
      other Lua object.
      Use object-oriented syntax, for example <code>channel:put(message)</code>
      rather than <code>fiber.channel.put(message)</code>. 
    </para>
<variablelist xml:id="fiber.ipc">
    <para>
    </para>
    <varlistentry>
        <term><emphasis role="lua">fiber.channel(<replaceable>capacity-number</replaceable>)</emphasis></term>
        <listitem>
            <para>
              Create a new communication channel.
            </para>
            <para>
              Parameters: <code>capacity-number</code> =
              a positive integer as great as the maximum number of slots
              (spaces for get or put or broadcast messages)
              that might be pending at any given time.
            </para>
            <para>
              Returns: new channel.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term><emphasis role="lua">channel:put(<replaceable>message[, timeout]</replaceable>)</emphasis></term>
        <listitem>
            <para>
                Send a message using a channel. If the channel is full,
                <code>channel:put()</code>
                blocks until there is a free slot in the channel.
            </para>
            <para>
                Parameters: <code>message</code>, <code>timeout</code>.
            </para>
            <para>
                Returns: If <code>timeout</code> is provided,
                and the channel doesn't become empty for the duration
                of the timeout,
                <code>channel:put()</code>
                returns false. Otherwise it returns true.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term><emphasis role="lua">channel:close()</emphasis></term>
        <listitem>
            <para>
               Close the channel. All waiters in the channel will be
               woken up. All following <code>channel:put()</code>
               or <code>channel:get()</code> operations will return
               an error (nil).
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term><emphasis role="lua">channel:get(<replaceable>[timeout]</replaceable>)</emphasis></term>
        <listitem>
            <para>
                Fetch a message from a channel. If the channel is empty,
                <code>channel:get()</code>
                blocks until there is a message.
            </para>
            <para>
              Parameters: <code>timeout</code>.
            </para>
            <para>
              Returns: the value placed on the channel by an earlier <code>channel:put()</code> or <code>channel:broadcast()</code>.
            </para>
            <para>
                Possible errors: If <code>timeout</code> is provided,
                and there are no new messages for the duration
                of the timeout,
                <code>channel:get()</code>
                returns error.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term><emphasis role="lua">channel:broadcast(<replaceable>message</replaceable>)</emphasis></term>
        <listitem>
            <para>
             If the channel is empty, <code>channel:broadcast()</code> is equivalent to
             <code>channel:put()</code>.
              Otherwise, <code>channel:broadcast()</code> sends the message to all readers of the
              channel.
            </para>
            <para>
             Parameters: <code>message</code>.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term><emphasis role="lua">channel:is_empty()</emphasis></term>
        <listitem>
            <para>
               Check whether the specified channel is empty (has no messages).
            </para>
            <para>
               Returns: (type = boolean) true if the specified channel is empty.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term><emphasis role="lua">channel:is_full()</emphasis></term>
        <listitem>
            <para>
                Check whether the specified channel is full.
            </para>
            <para>
                Returns: (type = boolean) true if the specified channel is full (has no room for a new message).
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term><emphasis role="lua">channel:has_readers()</emphasis></term>
        <listitem>
            <para>
               Check whether the specified channel is empty and has readers waiting
               for a message (because they have issued <code>channel:get()</code> and then
               blocked).
            </para>
            <para>
               Returns: (type = boolean) true if blocked users are waiting. Otherwise false.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term><emphasis role="lua">channel:has_writers()</emphasis></term>
        <listitem>
            <para>
                Check whether the specified channel is full and has writers waiting
                (because they have issued <code>channel:put()</code> and then blocked
                due to lack of room).
            </para>
            <para>
                Returns: (type = boolean) true if blocked users are waiting. Otherwise false.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term><emphasis role="lua">channel:is_closed()</emphasis></term>
        <listitem>
            <simpara>
                Returns: (type = boolean) true if the specified channel is already
                closed.
                Otherwise false.
            </simpara>
        </listitem>
    </varlistentry>
</variablelist>
<para>
            <bridgehead renderas="sect4">Example</bridgehead><programlisting>
             
fiber = require('fiber')            
channel = fiber.channel(10)
function consumer_fiber()
    while true do
        local task = channel:get()
        ...
    end
end

function consumer2_fiber()
    while true do
        local task = channel:get(10)        -- 10 seconds
        if task ~= nil then
            ...
        else
            ...                             -- timeout
        end
    end
end

function producer_fiber()
    while true do
        task = box.space...:select(...)
        ...
        if channel:is_empty() then
            # channel is empty
        end

        if channel:is_full() then
            # channel is full
        end

        ...
        if channel:has_readers() then
            # there are some fibers that are waiting for data
        end
        ...

        if channel:has_writers() then
            # there are some fibers that are waiting for readers
        end
        channel:put(task)
    end
end

function producer2_fiber()
    while true do
        task = box.space...select(...)

        if channel:put(task, 10) then       -- 10 seconds
            ...
        else
            ...                             -- timeout
        end
    end
end
</programlisting>
</para>
</section>

<section xml:id="sp-box-session">
    <title>Package <code>session</code></title>
    <para>
    The <code>session</code> package allows querying the session state,
    writing to a session-specific temporary Lua table, or setting up triggers
    which will fire when a session starts or ends.
    A <emphasis>session</emphasis> is an object associated with each client connection.
    </para>
<variablelist>
    <varlistentry>
        <term>
            <emphasis role="lua">session.id() </emphasis>
        </term>
        <listitem>
            <para>
              Returns: (type = number) the unique identifier
              (ID) for the current session. The result can be 0 meaning
              there is no session (for example because a function is
              running in a detached fiber).
            </para>
      </listitem>
    </varlistentry>

    <varlistentry>
        <term>
            <emphasis role="lua">session.exists(<replaceable>id</replaceable>) </emphasis>
        </term>
        <listitem>
            <para>
              Returns: (type = number) 1 if the session exists,
              0 if the session does not exist.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
        <emphasis role="lua">session.peer(<replaceable>id</replaceable>) </emphasis>
        </term>
        <listitem>
            <para>
               Parameters: <code>id</code> = the unique identifier of the session.
            </para>
            <para>
              Returns: (type = string) If the specified session exists, the host
              address and port of the session peer, for example "127.0.0.1:55457".
              If the specified session does not exist, "0.0.0.0:0". The command is executed on the server,
              so the "local name" is the server's host and administrative port,
              and the "peer name" is the client's host and port.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
           <emphasis role="lua">session.storage</emphasis>
        </term>
        <listitem>
            <para>
              A Lua table that can hold arbitrary
              unordered session-specific names and values, which will last until
              the session ends.
            </para>
        </listitem>
    </varlistentry>
</variablelist>

<para>
<bridgehead renderas="sect4">Example</bridgehead><programlisting>
<prompt>tarantool&gt;</prompt><userinput> session = require('session')</userinput>
---
...
<prompt>tarantool&gt;</prompt><userinput> session.peer(session.id())</userinput>
---
 - 127.0.0.1:45129
...
<prompt>tarantool&gt;</prompt><userinput> session.storage.random_memorandum = "Don't forget the eggs."</userinput>
---
...
<prompt>tarantool&gt;</prompt><userinput> session.storage.radius_of_mars = 3396</userinput>
---
...

<prompt>tarantool&gt;</prompt><userinput> m = ''</userinput>
---
...
<prompt>tarantool&gt;</prompt><userinput> for k, v in pairs(session.storage) do m = m .. k .. '=' .. v .. ' ' end</userinput>
---
...
<prompt>tarantool&gt;</prompt><userinput> m</userinput>
---
- 'radius_of_mars=3396 random_memorandum=Don''t forget the eggs. '
...</programlisting>
</para>

    <para>
See <olink targetptr="sp-box-session-triggers">the section "Triggers on connect and disconnect"</olink>
for instructions about defining triggers for connect and disconnect events
 with <code>session.on_connect()</code> and <code>session.on_disconnect()</code>.
    </para>
</section>

<section xml:id="sp-box-socket">
    <title>Package <code>socket</code> &mdash; TCP and UDP sockets</title>
<variablelist xml:id="socket">
    <para>
      The <code>socket</code> package allows exchanging data via BSD sockets
      with a local or remote host in connection-oriented (TCP) or datagram-oriented (UDP) mode.
      Semantics of the calls in the <code>socket</code> API closely follow
      semantics of the corresponding POSIX calls. Function names
      and signatures are mostly compatible with
      <link xlink:href="http://w3.impa.br/~diego/software/luasocket/">luasocket</link>.
    </para>
    <para>
      Similarly to luasocket, <code>socket</code> doesn't throw exceptions
      on errors. On success, most calls return a socket object.
      On error, a multiple return of <code>nil, status, errno, errstr</code>
      is produced.
      <code>Status</code> can be one of <code>"error"</code>, <code>"timeout"</code>,
      <code>"eof"</code> or <code>"limit"</code>. On
      success, status is always <code>nil</code>.
      A call which returns data (<code>recv()</code>, <code>recvfrom()</code>,
      <code>readline()</code>) on success returns a Lua string of
      the requested size and <code>nil</code> status. On error or timeout,
      an empty string is followed by the corresponding status, error number and message.
      A call which sends data (<code>send()</code>, <code>sendto()</code>) on
      success returns the number of bytes sent, and the <code>status</code> is, again,
      <code>nil</code>. On error or timeout <code>0</code> is returned,
      followed by status, error number and message.
    </para>
    <para>
      The last error can be retrieved from the socket using
      <code>socket:error()</code>. Any call except <code>error()</code> clears
      the last error first (but may set a new one).
    </para>
    <para>
      Calls which require a socket address and in POSIX expect
      <code>struct sockaddr_in</code>, in <code>socket</code>
      simply accept host name and port as additional arguments.
      Name resolution is done automatically. If it fails,
      status is set to <code>"error"</code>, errno is set to <code>-1</code>
      and error string is set to <code>"Host name resolution failed"</code>.
    </para>
    <para>
      All calls that can take time block the calling fiber
      and can get it preempted. The implementation, however, uses
      non-blocking cooperative I/O, so Tarantool continues processing
      queries while a call is blocked.
      A timeout can be provided for any socket call which can take
      a long time.
    </para>
    <para>
      Most of the functions in the API are usually used
      in object-oriented style, for example <code>socket:close()</code>.
    </para>
    <para>
      A closed socket should not be used any more. Alternatively, the
      socket will be closed when its userdata is garbage collected
      by Lua.
    </para>

    <varlistentry>
        <term><emphasis role="lua">socket.tcp()</emphasis></term>
        <listitem>
            <para>
                Create a new TCP socket.
            </para>
            <para>
                Returns: (type = userdata) a new socket, or <code>nil</code>.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term><emphasis role="lua">socket.udp()</emphasis></term>
        <listitem>
            <para>
                Create a new UDP socket.
            </para>
            <para>
                Returns: (type = userdata) a new socket, or <code>nil</code>.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term><emphasis role="lua">socket:connect(<replaceable>host, port, [timeout</replaceable>])</emphasis></term>
        <listitem>
            <para>
                Connect a socket to a remote host. Can be used with IPv6 and IPv4
                addresses, as well as domain names. If multiple addresses
                correspond to a domain, tries them all until connection succeeds.
               </para>
               <para>
                Parameters: <code>host</code>, <code>port</code>, <code>timeout</code>.
               </para>
               <para>
                Returns: (type = userdata) a connected socket on success,
                <code>nil, status, errno, errstr</code> on error or timeout.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term><emphasis role="lua">socket:send(<replaceable>data, [timeout]</replaceable>)</emphasis></term>
        <listitem>
            <para>
             Send data over a connected socket.
            </para>
            <para>
             Parameters: <code>data</code>, <code>timeout</code>.
            </para>
            <para>
             Returns: (type = number) the number of bytes sent. On success, this is exactly
             the length of <code>data</code>. In case of error or timeout,
             returns the number of bytes sent before error,
             followed by <code>status, errno, errstr</code>.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term><emphasis role="lua">socket:recv(<replaceable>size, [timeout]</replaceable>)</emphasis></term>
        <listitem>
            <para>
              Read <code>size</code> bytes from a connected socket.
              An internal read-ahead buffer is used to reduce the cost
              of this call.
            </para>
            <para>
              Parameters: <code>size</code>, <code>timeout</code>.
            </para>
            <para>
              Returns: (type = string) a string of the requested length on success.
              On error or timeout, returns an empty string, followed
              by <code>status, errno, errstr</code>.
              If there was some data read before a timeout occurred, it
              will be available on the next call.
              In case the writing side has closed its end, returns the remainder
              read from the socket (possibly an empty string),
              followed by <code>"eof"</code> status.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term><emphasis role="lua">socket:readline(<replaceable>[limit] [, separator list] [, timeout]</replaceable>)</emphasis></term>
        <listitem>
            <para>
                Read a line from a connected socket.
            </para>
            <para>
                <code>socket:readline()</code> with no arguments reads data from a socket
                until '\n' (line feed) or eof (end of transmission).
            </para>
            <para>
              Parameters: <code>limit</code> &mdash; maximum number of bytes to read. The function reads
              until a separator is seen, or until (limit) bytes have been read. The default is "no limit".
              <code>separator list</code> &mdash; a Lua table containing one or more separators.
              The function reads until one of the separators is seen. The default is a Lua table containing '\n'.
              <code>timeout</code> &mdash; number of seconds to wait before returning an error.
            </para>
            <para>
                Returns:
                (type = string) A Lua string with data if success,
                an empty string if error. If multiple separators were passed in <code>separator list</code>,
                the separator which matched is also shown, as the third part of the return.
                <table>
                    <title><code>readline()</code> returns</title>
                    <tgroup cols="2" align="left" colsep="1" rowsep="1">
                      <tbody>
                        <row>
                          <entry><code>data, nil, separator</code></entry><entry>success</entry>
                        </row>
                        <row>
                          <entry><code>"", "timeout", ETIMEDOUT, errstr</code></entry><entry>timeout</entry>
                        </row>
                        <row>
                          <entry><code>"", "error", errno, errstr</code></entry><entry>error</entry>
                        </row>
                        <row>
                          <entry><code>data, "limit"</code></entry><entry>limit</entry>
                        </row>
                        <row>
                          <entry><code>data, "eof"</code></entry><entry>eof</entry>
                        </row>
                      </tbody>
                    </tgroup>
                </table>
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term><emphasis role="lua">socket:bind(<replaceable>host, port[, timeout]</replaceable>)</emphasis></term>
        <listitem>
            <para>
                Bind a socket to the given host/port.
                A UDP socket after binding can be used
                to receive data (see <code>recvfrom()</code>). A TCP socket
                can be used to accept new connections, after it's
                been put in listen mode.
                The timeout is used for name resolution only. If host
                name is an IP address, <code>socket:bind</code> never yields and
                the timeout is unused.
            </para>
            <para>
              Parameters: <code>host</code>, <code>port</code>, <code>timeout</code>.
            </para>
            <para>
               Returns: (type = userdata) a socket object on success, <code>nil, status, errno, errstr</code> on error.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term><emphasis role="lua">socket:listen()</emphasis></term>
        <listitem>
            <para>
                Start listening for incoming connections. The listen
                backlog, on Linux, is taken from <filename>/proc/sys/net/core/somaxconn</filename>,
                whereas on BSD it is set to <constant>SOMAXCONN</constant>.
            </para>
            <para>
               Returns: (type = userdata) a socket object on success, <code>nil, "error", errno, errstr</code> on error.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term><emphasis role="lua">socket:accept(<replaceable>[timeout]</replaceable>)</emphasis></term>
        <listitem>
            <para>
                Wait for a new client connection and create a connected
                socket.
            </para>
            <para>
               Parameters: <code>timeout</code>.
            </para>
            <para>
               Returns: (type = userdata) <code>peer_socket, nil, peer_host, peer_port</code> on success.
               <code>nil, status, errno, errstr</code> on error.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term><emphasis role="lua">socket:sendto(<replaceable>data, host, port, [timeout]</replaceable>)</emphasis></term>
        <listitem>
            <para>
                Send a message on a UDP socket to a specified host.
            </para>
            <para>
               Parameters: <code>data</code>, <code>host</code>, <code>timeout</code>.
            </para>
            <para>
               Returns: (type = number) the number of bytes sent on success, <code>0, status, errno, errstr</code>
                on error or timeout.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term><emphasis role="lua">socket:recvfrom(<replaceable>limit[, timeout]</replaceable>)</emphasis></term>
        <listitem>
            <para>
                Receive a message on a UDP socket.
            </para>
            <para>
                Parameters: <code>limit</code>, <code>timeout</code>.
            </para>
            <para>
                Returns: (type = string) Message, <code>nil</code>, client address, client port on success,
                <code>"", status, errno, errstr</code> on error or timeout.
            </para>
        </listitem>
    </varlistentry>


    <varlistentry>
        <term><emphasis role="lua">socket:shutdown(<replaceable>how</replaceable>)</emphasis></term>
        <listitem>
            <para>
                Shutdown a reading, writing or both ends of a socket.
            </para>
            <para>
               Parameters: <code>how</code> = socket.SHUT_RD, socket.SHUT_WR,
               or socket.SHUT_RDWR.
            </para>
            <para>
               Returns: (type = userdata) Socket on success, <code>nil, "error", errno, errstr</code> on error.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term><emphasis role="lua">socket:close()</emphasis></term>
        <listitem>
            <para>
                Close (destroy) a socket. A closed socket should not
                be used any more.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term><emphasis role="lua">socket:error()</emphasis></term>
        <listitem>
            <para>
                Retrieve the last error that occurred on a socket.
            </para>
            <para>
                Returns:(type = number) <code>errno, errstr</code>. <code>0, "Success"</code>
                if there is no error.
            </para>
        </listitem>
    </varlistentry>
    
    <varlistentry>
        <term><emphasis role="lua">socket:setsockopt()</emphasis> etc.</term>
        <listitem>
            <para>
                For examples of functions not listed here -- including setsockopt,
                getsockopt, accept, wait, writable, and all the less-used functions --
                see the files bsdsocket.test.lua and socket.test.py which are supplied
                as part of the Tarantool source.
            </para>
        </listitem>
    </varlistentry>

</variablelist>


 <bridgehead renderas="sect4">Example showing use of socket over the Internet</bridgehead>
 <para>
 In this example a connection is made over the internet between the Tarantool server
 and <link xlink:href="http://mail.ru">mail.ru</link>,
 then an HTTP "get" message is sent, and a response is received: "HTTP/1.0 200 OK".
 This is not a useful way to communicate with this particular site,
 but shows that the system works.
<programlisting>
<prompt>tarantool&gt;</prompt> <userinput>socket = require('socket')</userinput>
---
...
<prompt>tarantool&gt;</prompt> <userinput>sock = socket.tcp()</userinput>
---
...
<prompt>tarantool&gt;</prompt> <userinput>type(sock)</userinput>
---
- userdata
...
<prompt>tarantool&gt;</prompt> <userinput>sock:connect('mail.ru', 80)</userinput>
---
- fd 22, aka 192.168.1.72:49488, peer of 94.100.180.199:80
...
<prompt>tarantool&gt;</prompt> <userinput>sock:error()</userinput>
---
- 0
 - Success
...
<prompt>tarantool&gt;</prompt> <userinput>sock:send('GET / HTTP/1.0\n\n')</userinput>
---
- 16
...
<prompt>tarantool&gt;</prompt> <userinput>sock:recv(17)</userinput>
---
- "HTTP/1.0 200 OK\r\n"
...
 <prompt>tarantool&gt;</prompt> <userinput>sock:close()</userinput>
---
...
</programlisting>
</para>

</section>

</section>

<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
